{"version":3,"names":["physics2DwasmFactory","constructor","this","_velocityIterations","_positionIterations","drawFlags_none","drawFlags_shapeBit","_box2d","b2Draw","e_shapeBit","drawFlags_jointBit","e_jointBit","drawFlags_aabbBit","e_aabbBit","drawFlags_pairBit","e_pairBit","drawFlags_centerOfMassBit","e_centerOfMassBit","drawFlags_all","box2d","world","_world","debugDraw","_debugDraw","PIXEL_RATIO","_PIXEL_RATIO","velocityIterations","positionIterations","gravity","GetGravity","value","createPhyVec2","x","y","SetGravity","allowSleeping","GetAllowSleeping","SetAllowSleeping","bodyCount","GetBodyCount","contactCount","GetContactCount","jointCount","GetJointCount","layaToPhyValue","_Re_PIXEL_RATIO","phyToLayaValue","b2Vec2","createPhyFromLayaVec2","initialize","window","Box2D","then","b2LinearStiffness","Promise","resolve","start","Physics2DOption","pixelRatio","Browser","b2World","destroyed","_tempVe21","_tempVe22","_tempPolygonShape","b2PolygonShape","_tempChainShape","b2ChainShape","_tempCircleShape","b2CircleShape","_tempEdgeShape","b2EdgeShape","_tempDistanceJointDef","b2DistanceJointDef","_tempGearJoinDef","b2GearJointDef","_tempPulleyJointDef","b2PulleyJointDef","_tempWheelJointDef","b2WheelJointDef","_tempWeldJointDef","b2WeldJointDef","_tempMouseJointDef","b2MouseJointDef","_tempRevoluteJointDef","b2RevoluteJointDef","_tempMotorJointDef","b2MotorJointDef","_tempPrismaticJointDef","b2PrismaticJointDef","_tempWorldManifold","b2WorldManifold","SetDestructionListener","getDestructionListener","SetContactListener","getContactListener","destroyWorld","destory","destroy","_jsDraw","removeSelf","update","delta","Step","sendEvent","type","contact","GetFixtureA","GetFixtureB","colliderA","collider","colliderB","ownerA","owner","ownerB","__this","getHitInfo","manifold","GetWorldManifold","p","points","args","event","createDebugDraw","flags","Physics2DDebugDraw","ILaya","stage","addChild","zOrder","jsDraw","JSDraw","SetFlags","DrawSegment","bind","DrawPolygon","DrawSolidPolygon","DrawCircle","DrawSolidCircle","DrawTransform","DrawPoint","DrawAABB","SetDebugDraw","removeDebugDraw","setDebugFlag","appendFlags","AppendFlags","clearFlags","ClearFlags","shiftOrigin","ShiftOrigin","createBody","def","b2BodyDef","userData","pointer","body","CreateBody","console","error","removeBody","DestroyBody","createJoint","cls","joint","CreateJoint","castObject","m_userData","removeJoint","DestroyJoint","getJoint_userData","GetUserData","getJoint_userData_destroy","set_Joint_EnableMotor","enableMotor","EnableMotor","set_Joint_SetMotorSpeed","motorSpeed","SetMotorSpeed","set_Joint_SetMaxMotorTorque","maxTorque","SetMaxMotorTorque","set_Joint_EnableLimit","enableLimit","EnableLimit","set_Joint_SetLimits","lowerAngle","upperAngle","SetLimits","set_Joint_frequencyAndDampingRatio","Joint","frequency","dampingRatio","isdamping","out","b2AngularStiffness","GetBodyA","GetBodyB","SetStiffness","stiffness","SetDamping","damping","createDistanceJoint","defStruct","bodyA","bodyB","localAnchorA","Set","localAnchorB","set_collideConnected","collideConnected","length","p1","GetWorldPoint","data","p2","getVec2Length","maxLength","minLength","b2DistanceJoint","set_DistanceJoint_length","SetLength","set_DistanceJoint_MaxLength","SetMaxLength","set_DistanceJoint_MinLength","SetMinLength","set_DistanceJointStiffnessDamping","steffness","create_GearJoint","joint1","joint2","ratio","b2GearJoint","set_GearJoint_SetRatio","radio","SetRatio","create_PulleyJoint","groundVecA","groundAnchorA","groundVecB","groundAnchorB","anchorVecA","anchorVecB","Initialize","b2PulleyJoint","create_WheelJoint","anchorVec","anchor","axis","maxMotorTorque","lowerTranslation","upperTranslation","b2WheelJoint","create_WeldJoint","b2WeldJoint","create_MouseJoint","target","maxForce","GetMass","b2MouseJoint","set_MouseJoint_target","SetTarget","set_MouseJoint_frequencyAndDampingRatio","create_RevoluteJoint","b2RevoluteJoint","create_MotorJoint","linearOffset","angularOffset","correctionFactor","b2MotorJoint","set_MotorJoint_linearOffset","SetLinearOffset","set_MotorJoint_SetAngularOffset","angular","SetAngularOffset","set_MotorJoint_SetMaxForce","SetMaxForce","set_MotorJoint_SetMaxTorque","SetMaxTorque","set_MotorJoint_SetCorrectionFactor","SetCorrectionFactor","create_PrismaticJoint","tdef","maxMotorForce","b2PrismaticJoint","create_boxColliderShape","set_collider_SetAsBox","shape","width","height","pos","scaleX","scaleY","centroid","m_centroid","SetAsBox","create_ChainShape","set_ChainShape_data","arr","loop","len","ptr_wrapped","createVec2Pointer","CreateLoop","CreateChain","create_CircleShape","set_CircleShape_radius","radius","scale","m_radius","set_CircleShape_pos","m_p","create_EdgeShape","set_EdgeShape_data","ps","i","n","push","SetTwoSided","create_PolygonShape","set_PolygonShape_data","createFixtureDef","fixtureDef","b2FixtureDef","density","friction","isSensor","restitution","PhysicsShape","BoxShape","PolygonShape","set_shape","ChainShape","CircleShape","EdgeShape","shapeType","_shape","get_fixtureshape","set_fixtureDef_GroupIndex","groupIndex","filter","set_fixtureDef_CategoryBits","categoryBits","set_fixtureDef_maskBits","maskbits","maskBits","createfixture","CreateFixture","GetShape","GetFilterData","resetFixtureData","fixture","SetDensity","SetFriction","SetSensor","SetRestitution","set_fixture_collider","instance","get_fixture_body","GetBody","rigidBody_DestroyFixture","DestroyFixture","rigidBodyDef_Create","rigidbodyDef","position","angle","allowSleep","angularDamping","angularVelocity","bullet","fixedRotation","gravityScale","linearDamping","linearVelocity","getbodyType","get_RigidBody_Position","v2","GetPosition","setValue","get_RigidBody_Angle","GetAngle","set_RigibBody_Transform","SetTransform","get_rigidBody_WorldPoint","point","get_rigidBody_LocalPoint","GetLocalPoint","rigidBody_applyForce","force","ApplyForce","rigidBody_applyForceToCenter","ApplyForceToCenter","rigidbody_ApplyLinearImpulse","impulse","ApplyLinearImpulse","rigidbody_ApplyLinearImpulseToCenter","ApplyLinearImpulseToCenter","rigidbody_applyTorque","torque","ApplyTorque","set_rigidbody_Velocity","velocity","SetLinearVelocity","set_rigidbody_Awake","awake","SetAwake","get_rigidbody_Mass","get_rigidBody_Center","GetLocalCenter","get_rigidBody_IsAwake","IsAwake","get_rigidBody_WorldCenter","GetWorldCenter","set_rigidBody_type","SetType","set_rigidBody_gravityScale","SetGravityScale","set_rigidBody_allowRotation","SetFixedRotation","set_rigidBody_allowSleep","SetSleepingAllowed","set_rigidBody_angularDamping","SetAngularDamping","get_rigidBody_angularVelocity","GetAngularVelocity","set_rigidBody_angularVelocity","SetAngularVelocity","set_rigidBody_linearDamping","SetLinearDamping","get_rigidBody_linearVelocity","GetLinearVelocity","set_rigidBody_linearVelocity","set_rigidBody_bullet","SetBullet","retSet_rigidBody_MassData","ResetMassData","b2_dynamicBody","b2_staticBody","b2_kinematicBody","makeStyleString","color","alpha","cv","colorData","wrapPointer","b2Color","r","toFixed","g","b","getBox2DPoints","vertices","vertexCount","vert","get_x","get_y","mG","drawPoly","lineWidth","center","centerV","drawCircle","cx","cy","drawLine","xf","b2Transform","PushTransform","q","Red","Green","PopTransform","size","camera","m_zoom","m_extent","hsize","drawRect","DrawString","message","textG","fillText","DrawString_color","DrawStringWorld","min","max","hw","hh","cs","linew","listner","JSContactListener","BeginContact","Physics2D","I","_eventList","b2Contact","EndContact","PreSolve","oldManifold","PostSolve","JSDestructionListener","SayGoodbyeJoint","b2Joint","SayGoodbyeFixture","b2Fixture","createWrapPointer","buffer","_malloc","offset","HEAPF32","frequencyHertz","undefined","massA","massB","mass","omega","Math","PI","IA","GetInertia","IB","sqrt","pow","isNullData","compare","NULL","__destroy__","physicShape","_factory"],"sources":["../../src/layaAir/laya/physics/factory/physics2DwasmFactory.ts"],"sourcesContent":["\nimport { ILaya } from \"../../../ILaya\";\nimport { IV2, Vector2 } from \"../../maths/Vector2\";\nimport { ColliderBase } from \"../Collider2D/ColliderBase\";\nimport { FixtureBox2DDef, PhysicsShape } from \"../Collider2D/ColliderStructInfo\";\nimport { IPhysiscs2DFactory } from \"../IPhysiscs2DFactory\";\nimport { Physics2D } from \"../Physics2D\";\nimport { Physics2DOption } from \"../Physics2DOption\";\nimport { Physics2DDebugDraw } from \"../Physics2DDebugDraw\";\nimport { RigidBody2DInfo } from \"../RigidBody2DInfo\";\nimport { physics2D_DistancJointDef, physics2D_GearJointDef, physics2D_MotorJointDef, physics2D_MouseJointJointDef, physics2D_PrismaticJointDef, physics2D_PulleyJointDef, physics2D_RevoluteJointDef, physics2D_WeldJointDef, physics2D_WheelJointDef } from \"../joint/JointDefStructInfo\"\nimport { Browser } from \"../../utils/Browser\";\n\nconst b2_maxFloat = 1E+37;\n\n/**\n * 实现Box2D c++  2.4.1 版本\n */\nexport class physics2DwasmFactory implements IPhysiscs2DFactory {\n    private _tempVe21: any;\n    private _tempVe22: any;\n\n    /**@internal box2D Engine */\n    _box2d: any;\n\n    /**@internal box2D world */\n    _world: any;\n\n    /**@internal  */\n    _debugDraw: Physics2DDebugDraw;\n\n    /**@internal  */\n    private _jsDraw: any;\n\n    /**@internal 旋转迭代次数，增大数字会提高精度，但是会降低性能*/\n    _velocityIterations: number = 8;\n\n    /**@internal 位置迭代次数，增大数字会提高精度，但是会降低性能*/\n    _positionIterations: number = 3;\n\n    /**@internal 像素转换米的转换比率*/\n    _PIXEL_RATIO: number;\n\n    /**@internal 米转换像素的转换比率*/\n    _Re_PIXEL_RATIO: number;\n\n    /**@internal  */\n    _tempVec2: any;\n\n    /**@internal  */\n    protected _tempDistanceJointDef: any;\n\n    /**@internal  */\n    protected _tempGearJoinDef: any;\n\n    /**@internal  */\n    protected _tempPulleyJointDef: any;\n\n    /**@internal  */\n    protected _tempWheelJointDef: any;\n\n    /**@internal  */\n    protected _tempWeldJointDef: any;\n\n    /**@internal  */\n    protected _tempMouseJointDef: any;\n\n    /**@internal  */\n    protected _tempRevoluteJointDef: any;\n\n    /**@internal  */\n    protected _tempMotorJointDef: any;\n\n    /**@internal  */\n    protected _tempPrismaticJointDef: any;\n\n    /**@internal  */\n    protected _tempPolygonShape: any;\n    /**@internal  */\n    protected _tempChainShape: any;\n    /**@internal  */\n    protected _tempCircleShape: any;\n    /**@internal  */\n    protected _tempEdgeShape: any;\n    /**@internal  */\n    protected _tempWorldManifold: any;\n\n\n\n    /** \n    * @internal\n    */\n    get drawFlags_none(): number {\n        return 0;\n    }\n\n    /** \n     * @internal\n     */\n    get drawFlags_shapeBit(): number {\n        return this._box2d.b2Draw.e_shapeBit;\n    }\n\n    /** \n     * @internal\n     */\n    get drawFlags_jointBit(): number {\n        return this._box2d.b2Draw.e_jointBit;\n    }\n\n    /** \n     * @internal\n     */\n    get drawFlags_aabbBit(): number {\n        return this._box2d.b2Draw.e_aabbBit;\n    }\n\n    /** \n     * @internal\n     */\n    get drawFlags_pairBit(): number {\n        return this._box2d.b2Draw.e_pairBit;\n    }\n\n    /** \n     * @internal\n     */\n    get drawFlags_centerOfMassBit(): number {\n        return this._box2d.b2Draw.e_centerOfMassBit;\n    }\n\n    /** \n     * @internal\n     */\n    get drawFlags_all(): number {\n        return 63;\n    }\n\n    /** \n     * @internal\n     */\n    get box2d(): any {\n        return this._box2d;\n    }\n\n    /** \n     * @internal\n     */\n    get world(): any {\n        return this._world;\n    }\n\n    /** \n     * @internal\n     */\n    get debugDraw(): Physics2DDebugDraw {\n        return this._debugDraw;\n    }\n\n    /** \n     * @internal\n     */\n    get PIXEL_RATIO(): number {\n        return this._PIXEL_RATIO;\n    }\n\n    /** \n     * @internal\n     */\n    get velocityIterations(): number {\n        return this._velocityIterations;\n    }\n\n    /** \n     * @internal\n     */\n    get positionIterations(): number {\n        return this._positionIterations;\n    }\n\n    /**\n     * @internal\n     * 物理世界重力环境，默认值为{x:0,y:1}\n     * 如果修改y方向重力方向向上，可以直接设置gravity.y=-1;\n     */\n    get gravity(): any {\n        return this.world.GetGravity();\n    }\n\n    set gravity(value: Vector2) {\n        var gravity: any = this.createPhyVec2(value.x, value.y);//TODO 全局设置，不必New\n        this.world.SetGravity(gravity);\n    }\n\n    /**\n     * @internal\n     * 设置是否允许休眠，休眠可以提高稳定性和性能，但通常会牺牲准确性\n     */\n    get allowSleeping(): boolean {\n        return this.world.GetAllowSleeping();\n    }\n\n    set allowSleeping(value: boolean) {\n        this.world.SetAllowSleeping(value);\n    }\n\n\n    /**@internal 获得刚体总数量*/\n    get bodyCount(): number {\n        return this.world.GetBodyCount();\n    }\n\n    /**@internal 获得碰撞总数量*/\n    get contactCount(): number {\n        return this.world.GetContactCount();\n    }\n\n    /**@internal 获得关节总数量*/\n    get jointCount(): number {\n        return this.world.GetJointCount();\n    }\n\n\n    /**\n     * @internal\n     * 渲染系统数据转换为物理系统数据 \n     */\n    layaToPhyValue(value: number): number {\n        return value * this._Re_PIXEL_RATIO;\n    }\n\n    /**\n     * @internal\n     * 物理系统数据转换为渲染系统数据 \n     */\n    phyToLayaValue(value: number): number {\n        return value * this.PIXEL_RATIO;\n    }\n\n    /** \n     * @internal\n     * 创建物理系统的Vec2\n     * @param x (单位： 米)\n     * @param y (单位： 米)\n     */\n    createPhyVec2(x: number, y: number): any {\n        return new this.box2d.b2Vec2(x, y);\n    }\n\n    /** \n     * @internal\n     * 创建物理系统的Vec2\n     * @param x (单位： 像素)\n     * @param y (单位： 像素)\n     */\n    createPhyFromLayaVec2(x: number, y: number): any {\n        return new this.box2d.b2Vec2(this.layaToPhyValue(x), this.layaToPhyValue(y));\n    }\n\n    /**\n     * initial box2D physics Engine\n     * @returns \n     */\n    initialize(): Promise<void> {\n        return (window as any).Box2D().then((box2d: any) => {\n            this._box2d = box2d;\n            this._box2d.b2LinearStiffness = this.b2LinearStiffness;\n            return Promise.resolve();\n        });\n    }\n\n    /**\n     * create Box2D world\n     */\n    start() {\n        this._PIXEL_RATIO = Physics2DOption.pixelRatio * Browser.pixelRatio;;\n        this._Re_PIXEL_RATIO = 1 / this._PIXEL_RATIO;\n        var gravity: any = this.createPhyVec2(Physics2DOption.gravity.x, Physics2DOption.gravity.y);\n        this._world = new this.box2d.b2World(gravity);\n        this._world.destroyed = false;\n\n        this._tempVe21 = new this.box2d.b2Vec2();\n        this._tempVe22 = new this.box2d.b2Vec2();\n\n        this._tempPolygonShape = new this.box2d.b2PolygonShape();\n        this._tempChainShape = new this.box2d.b2ChainShape();\n        this._tempCircleShape = new this.box2d.b2CircleShape();\n        this._tempEdgeShape = new this.box2d.b2EdgeShape();\n\n        this._tempDistanceJointDef = new this.box2d.b2DistanceJointDef();\n        this._tempGearJoinDef = new this.box2d.b2GearJointDef();\n        this._tempPulleyJointDef = new this.box2d.b2PulleyJointDef();\n        this._tempWheelJointDef = new this.box2d.b2WheelJointDef();\n        this._tempWeldJointDef = new this.box2d.b2WeldJointDef();\n        this._tempMouseJointDef = new this.box2d.b2MouseJointDef();\n        this._tempRevoluteJointDef = new this.box2d.b2RevoluteJointDef();\n        this._tempMotorJointDef = new this.box2d.b2MotorJointDef();\n        this._tempPrismaticJointDef = new this.box2d.b2PrismaticJointDef();\n        this._tempWorldManifold = new this.box2d.b2WorldManifold();\n\n        this.world.SetDestructionListener(this.getDestructionListener());\n        this.world.SetContactListener(this.getContactListener());\n        this.allowSleeping = Physics2DOption.allowSleeping == null ? true : Physics2DOption.allowSleeping;\n        this._velocityIterations = Physics2DOption.velocityIterations;\n        this._positionIterations = Physics2DOption.positionIterations;\n    }\n\n    /**\n    * @internal\n    * destroy Box2D world\n    * @param options \n    */\n    destroyWorld() {\n        if (this._tempVe21) {\n            this.destory(this._tempVe21);\n            this._tempVe21 = null;\n        }\n        if (this._tempVe22) {\n            this.destory(this._tempVe22);\n            this._tempVe22 = null;\n        }\n\n        if (this._tempPolygonShape) {\n            this.destory(this._tempPolygonShape);\n            this._tempPolygonShape = null;\n        }\n        if (this._tempChainShape) {\n            this.destory(this._tempChainShape);\n            this._tempChainShape = null;\n        }\n        if (this._tempCircleShape) {\n            this.destory(this._tempCircleShape);\n            this._tempCircleShape = null;\n        }\n        if (this._tempEdgeShape) {\n            this.destory(this._tempEdgeShape);\n            this._tempEdgeShape = null;\n        }\n\n        if (this._tempDistanceJointDef) {\n            this.destory(this._tempDistanceJointDef);\n            this._tempDistanceJointDef = null;\n        }\n        if (this._tempGearJoinDef) {\n            this.destory(this._tempGearJoinDef);\n            this._tempGearJoinDef = null;\n        }\n        if (this._tempPulleyJointDef) {\n            this.destory(this._tempPulleyJointDef);\n            this._tempPulleyJointDef = null;\n        }\n        if (this._tempWheelJointDef) {\n            this.destory(this._tempWheelJointDef);\n            this._tempWheelJointDef = null;\n        }\n        if (this._tempWeldJointDef) {\n            this.destory(this._tempWeldJointDef);\n            this._tempWeldJointDef = null;\n        }\n        if (this._tempMouseJointDef) {\n            this.destory(this._tempMouseJointDef);\n            this._tempMouseJointDef = null;\n        }\n        if (this._tempRevoluteJointDef) {\n            this.destory(this._tempRevoluteJointDef);\n            this._tempRevoluteJointDef = null;\n        }\n        if (this._tempMotorJointDef) {\n            this.destory(this._tempMotorJointDef);\n            this._tempMotorJointDef = null;\n        }\n        if (this._tempPrismaticJointDef) {\n            this.destory(this._tempPrismaticJointDef);\n            this._tempPrismaticJointDef = null;\n        }\n\n        if (this._tempWorldManifold) {\n            this.destory(this._tempWorldManifold);\n            this._tempWorldManifold = null;\n        }\n\n        if (this._world) {\n            this.box2d.destroy(this._world)\n            this._world.destroyed = true;\n            this._world = null;\n        }\n        this._jsDraw = null;\n        if (this._debugDraw) {\n            this._debugDraw.removeSelf()\n            this._debugDraw = null\n        }\n    }\n\n    /**\n     * update Frame\n     * @param delta \n     */\n    update(delta: number): void {\n\n        //set Physics Position from Engine TODO\n        this._world & this._world.Step(delta, this.velocityIterations, this.positionIterations, 3);\n\n        //set engine Position from Phyiscs TODO\n    }\n\n    /**\n     * set Event CallBack\n     * @param type \n     * @param contact \n     */\n    sendEvent(type: string, contact: any): void {\n        if (contact.GetFixtureA() == null || contact.GetFixtureB() == null) {\n            return;\n        }\n        let colliderA: any = contact.GetFixtureA().collider;\n        let colliderB: any = contact.GetFixtureB().collider;\n        if (colliderA == null || colliderB == null) {\n            return;\n        }\n        if (colliderA.destroyed || colliderB.destroyed) {\n            return;\n        }\n        let ownerA: any = colliderA.owner;\n        let ownerB: any = colliderB.owner;\n        let __this = this;\n        contact.getHitInfo = function (): any {\n            var manifold: any = __this._tempWorldManifold;\n            this.GetWorldManifold(manifold);\n            //第一点？\n            let p: any = manifold.points;\n            p.x = __this.phyToLayaValue(p.x);\n            p.y = __this.phyToLayaValue(p.y);\n            return manifold;\n        }\n        if (ownerA) {\n            var args: any[] = [colliderB, colliderA, contact];\n            ownerA.event(type, args);\n        }\n        if (ownerB) {\n            args = [colliderA, colliderB, contact];\n            ownerB.event(type, args);\n        }\n    }\n\n    /** \n     * @internal\n     * 创建物理绘制\n     */\n    createDebugDraw(flags: number) {\n        if (this._debugDraw) return;\n        this._debugDraw = new Physics2DDebugDraw(this);\n        ILaya.stage.addChild(this._debugDraw);\n        this._debugDraw.zOrder = 1000;\n\n        if (this._jsDraw == null) {\n            var jsDraw = this._jsDraw = new this.box2d.JSDraw();\n            jsDraw.SetFlags(flags);\n            jsDraw.DrawSegment = this.DrawSegment.bind(this);\n            jsDraw.DrawPolygon = this.DrawPolygon.bind(this);\n            jsDraw.DrawSolidPolygon = this.DrawSolidPolygon.bind(this);\n            jsDraw.DrawCircle = this.DrawCircle.bind(this);\n            jsDraw.DrawSolidCircle = this.DrawSolidCircle.bind(this);\n            jsDraw.DrawTransform = this.DrawTransform.bind(this);\n            jsDraw.DrawPoint = this.DrawPoint.bind(this);\n            jsDraw.DrawAABB = this.DrawAABB.bind(this);\n        }\n\n        this.world.SetDebugDraw(this._jsDraw);\n    }\n\n    /** \n     * @internal\n     * 删除物理绘制\n     */\n    removeDebugDraw() {\n        if (!this._debugDraw) return;\n        this.world.SetDebugDraw(null);\n        this._debugDraw.removeSelf()\n        this._debugDraw.destroy()\n        this._debugDraw = null;\n    }\n\n    /** \n     * @internal\n     * 更新显示数据\n     */\n    setDebugFlag(flags: number): void {\n        if (this._jsDraw) this._jsDraw.SetFlags(flags);\n    }\n\n    /** \n     * @internal\n     * 显示标记\n     */\n    appendFlags(flags: number): void {\n        if (this._jsDraw) this._jsDraw.AppendFlags(flags);\n    }\n\n    /** \n     * @internal\n     * 清除标记\n     */\n    clearFlags(flags: number): void {\n        if (this._jsDraw) this._jsDraw.ClearFlags(flags);\n    }\n\n    /** \n     * @internal\n     * 移动世界中心点\n     * @param x (单位： 像素)\n     * @param y (单位： 像素)\n     */\n    shiftOrigin(x: number, y: number) {\n        this._world & this.world.ShiftOrigin({ x: x, y: y });\n    }\n\n    /**\n     * create Box2D Body\n     * @param def \n     * @returns \n     */\n    createBody(def: any) {\n        if (!def) {\n            def = new this.box2d.b2BodyDef()\n        }\n        def.userData = { pointer: 0 };\n        if (this.world) {\n            let body = this.world.CreateBody(def);\n            body.world = this.world;\n            return body;\n        } else {\n            console.error('The physical engine should be initialized first.use \"Physics.enable()\"');\n            return null;\n        }\n    }\n\n    /**\n     * remove Box2D Body\n     * @param body \n     */\n    removeBody(body: any): void {\n        let world = body.world;\n        if (!world.destroyed) world.DestroyBody(body);\n    }\n\n    /**\n    * create Box2D Joint\n    * @param def \n    * @returns \n    */\n    createJoint(def: any, cls: any = null): any {\n        if (this.world) {\n            let joint = this.world.CreateJoint(def);\n            if (cls != null) {\n                joint = this.castObject(joint, cls)\n            }\n            joint.m_userData = {};\n            joint.world = this._world;\n            return joint;\n        } else {\n            console.error('The physical engine should be initialized first.use \"Physics.enable()\"');\n            return null;\n        }\n    }\n\n    /**\n     * Remove Box2D Joint\n     * @param joint \n     */\n    removeJoint(joint: any): void {\n        if (joint && joint.world && !joint.world.destroyed)\n            joint.world.DestroyJoint(joint);\n    }\n\n    /** \n     * @param joint \n     */\n    getJoint_userData(joint: any) {\n        return joint.GetUserData();\n    }\n\n    /** \n     * @param joint \n     */\n    getJoint_userData_destroy(joint: any): boolean {\n        return joint.GetUserData().pointer == -1;\n    }\n\n    /** \n     * @param joint\n     * @param enableMotor \n     */\n    set_Joint_EnableMotor(joint: any, enableMotor: boolean): void {\n        joint.EnableMotor(enableMotor);\n    }\n\n    /** \n     * @param joint \n     * @param motorSpeed \n     */\n    set_Joint_SetMotorSpeed(joint: any, motorSpeed: number): void {\n        joint.SetMotorSpeed(motorSpeed);\n    }\n\n    /** \n     * @param joint \n     * @param maxTorque \n     */\n    set_Joint_SetMaxMotorTorque(joint: any, maxTorque: number): void {\n        joint.SetMaxMotorTorque(maxTorque);\n    }\n\n    /** \n     * @param joint \n     * @param enableLimit \n     */\n    set_Joint_EnableLimit(joint: any, enableLimit: boolean): void {\n        joint.EnableLimit(enableLimit);\n    }\n\n    /** \n     * @param joint \n     * @param lowerAngle \n     * @param upperAngle \n     */\n    set_Joint_SetLimits(joint: any, lowerAngle: number, upperAngle: number): void {\n        joint.SetLimits(lowerAngle, upperAngle);\n    }\n\n    /** \n     * @param Joint \n     * @param frequency \n     * @param dampingRatio \n     * @param isdamping \n     */\n    set_Joint_frequencyAndDampingRatio(Joint: any, frequency: number, dampingRatio: number, isdamping: boolean): void {\n        let out: any = {}\n        this.box2d.b2AngularStiffness(out, frequency, dampingRatio, Joint.GetBodyA(), Joint.GetBodyB());\n        if (!isdamping) {\n            Joint.SetStiffness(out.stiffness);\n        }\n        Joint.SetDamping(out.damping);\n    }\n\n    /** \n     * @param defStruct \n     * @returns\n     */\n    createDistanceJoint(defStruct: physics2D_DistancJointDef) {\n        const def = this._tempDistanceJointDef;\n        def.bodyA = defStruct.bodyA;\n        def.bodyB = defStruct.bodyB;\n        def.localAnchorA.Set(this.layaToPhyValue(defStruct.localAnchorA.x), this.layaToPhyValue(defStruct.localAnchorA.y));\n        def.localAnchorB.Set(this.layaToPhyValue(defStruct.localAnchorB.x), this.layaToPhyValue(defStruct.localAnchorB.y));\n\n        this.b2LinearStiffness(def, defStruct.frequency, defStruct.dampingRatio, def.bodyA, def.bodyB);\n        def.set_collideConnected(defStruct.collideConnected);\n\n        if (defStruct.length > 0) {\n            def.length = this.layaToPhyValue(defStruct.length);\n        } else {\n            var p1: any = def.bodyA.GetWorldPoint(def.localAnchorA);\n            let data = { x: p1.x, y: p1.y };\n            var p2: any = def.bodyB.GetWorldPoint(def.localAnchorB);\n            def.length = this.getVec2Length(data, p2);\n        }\n\n        if (defStruct.maxLength > 0)\n            def.maxLength = this.layaToPhyValue(defStruct.maxLength);\n        else\n            def.maxLength = b2_maxFloat;\n\n        if (defStruct.minLength > 0)\n            def.minLength = this.layaToPhyValue(defStruct.minLength);\n        else\n            def.minLength = 0;\n\n        return this.createJoint(def, this.box2d.b2DistanceJoint);\n    }\n\n    /** \n     * @param joint \n     * @param length \n     */\n    set_DistanceJoint_length(joint: any, length: number) {\n        joint.SetLength(this.layaToPhyValue(length));\n    }\n\n    /** \n     * @param joint \n     * @param length \n     */\n    set_DistanceJoint_MaxLength(joint: any, length: number) {\n        joint.SetMaxLength(this.layaToPhyValue(length));\n    }\n\n    /** \n     * @param joint \n     * @param length \n     */\n    set_DistanceJoint_MinLength(joint: any, length: number) {\n        joint.SetMinLength(this.layaToPhyValue(length));\n    }\n\n    /** \n     * @param joint \n     * @param steffness \n     * @param damping \n     */\n    set_DistanceJointStiffnessDamping(joint: any, steffness: number, damping: number) {\n        let out: any = {};\n        let bodyA = joint.GetBodyA();\n        let bodyB = joint.GetBodyB();\n        this.box2d.b2LinearStiffness(out, steffness, damping, bodyA, bodyB);\n        joint.SetStiffness(out.stiffness);\n        joint.SetDamping(out.damping);\n    }\n\n    /** \n     * @param defStruct \n     * @returns\n     */\n    create_GearJoint(defStruct: physics2D_GearJointDef): void {\n        let def = this._tempGearJoinDef;\n        def.bodyA = defStruct.bodyA;\n        def.bodyB = defStruct.bodyB;\n        def.joint1 = defStruct.joint1;\n        def.joint2 = defStruct.joint2;\n        def.ratio = defStruct.ratio;\n        def.collideConnected = defStruct.collideConnected;\n        return this.createJoint(def, this.box2d.b2GearJoint);\n    }\n\n    /** \n     * @param joint \n     * @param radio \n     */\n    set_GearJoint_SetRatio(joint: any, radio: number): void {\n        joint.SetRatio(radio);\n    }\n\n    /** \n     * @param defStruct \n     * @returns\n     */\n    create_PulleyJoint(defStruct: physics2D_PulleyJointDef): void {\n        let def = this._tempPulleyJointDef;\n        let groundVecA = this.createPhyFromLayaVec2(defStruct.groundAnchorA.x, defStruct.groundAnchorA.y);\n        let groundVecB = this.createPhyFromLayaVec2(defStruct.groundAnchorB.x, defStruct.groundAnchorB.y);\n        let anchorVecA = this.createPhyFromLayaVec2(defStruct.localAnchorA.x, defStruct.localAnchorA.y);\n        let anchorVecB = this.createPhyFromLayaVec2(defStruct.localAnchorB.x, defStruct.localAnchorB.y);\n        def.Initialize(defStruct.bodyA, defStruct.bodyB, groundVecA, groundVecB, anchorVecA, anchorVecB, defStruct.ratio);\n        def.collideConnected = defStruct.collideConnected;\n        return this.createJoint(def, this.box2d.b2PulleyJoint);\n    }\n\n    /** \n     * @param defStruct \n     * @returns\n     */\n    create_WheelJoint(defStruct: physics2D_WheelJointDef) {\n        let def = this._tempWheelJointDef;\n        let anchorVec = this.createPhyFromLayaVec2(defStruct.anchor.x, defStruct.anchor.y);\n        let axis = this.createPhyVec2(defStruct.axis.x, defStruct.axis.y);\n        def.Initialize(defStruct.bodyA, defStruct.bodyB, anchorVec, axis);\n        def.enableMotor = defStruct.enableMotor;\n        def.motorSpeed = defStruct.motorSpeed;\n        def.maxMotorTorque = defStruct.maxMotorTorque;\n        this.b2LinearStiffness(def, defStruct.frequency, defStruct.dampingRatio, def.bodyA, def.bodyB);\n        def.collideConnected = defStruct.collideConnected;\n        def.enableLimit = defStruct.enableLimit;\n        def.lowerTranslation = this.layaToPhyValue(defStruct.lowerTranslation);\n        def.upperTranslation = this.layaToPhyValue(defStruct.upperTranslation);\n        return this.createJoint(def, this.box2d.b2WheelJoint);\n    }\n\n    /** \n     * @param defStruct \n     * @returns\n     */\n    create_WeldJoint(defStruct: physics2D_WeldJointDef) {\n        let def = this._tempWeldJointDef;\n        let anchorVec = this.createPhyFromLayaVec2(defStruct.anchor.x, defStruct.anchor.y);\n        def.Initialize(defStruct.bodyA, defStruct.bodyB, anchorVec);\n        this.b2AngularStiffness(def, defStruct.frequency, defStruct.dampingRatio, defStruct.bodyA, defStruct.bodyB);\n        def.collideConnected = defStruct.collideConnected;\n        return this.createJoint(def, this.box2d.b2WeldJoint);\n    }\n\n    /** \n     * @param def \n     * @returns\n     */\n    create_MouseJoint(defStruct: physics2D_MouseJointJointDef): any {\n        let def = this._tempMouseJointDef;\n        def.bodyA = defStruct.bodyA;\n        def.bodyB = defStruct.bodyB;\n        def.target = this.createPhyFromLayaVec2(defStruct.target.x, defStruct.target.y);\n        def.maxForce = defStruct.maxForce * defStruct.bodyB.GetMass();\n        def.collideConnected = true;\n        this.b2LinearStiffness(def, defStruct.frequency, defStruct.dampingRatio, defStruct.bodyA, defStruct.bodyB)\n        return this.createJoint(def, this.box2d.b2MouseJoint);\n    }\n\n    /** \n     * @param joint \n     * @param x \n     * @param y \n     */\n    set_MouseJoint_target(joint: any, x: number, y: number) {\n        this._tempVe21.x = this.layaToPhyValue(x);\n        this._tempVe21.y = this.layaToPhyValue(y);\n        joint.SetTarget(this._tempVe21)\n    }\n\n    /** \n     * @param Joint \n     * @param frequency \n     * @param dampingRatio \n     */\n    set_MouseJoint_frequencyAndDampingRatio(Joint: any, frequency: number, dampingRatio: number) {\n        this.set_DistanceJointStiffnessDamping(Joint, frequency, dampingRatio);\n    }\n\n    /** \n     * @param defStruct \n     * @returns\n     */\n    create_RevoluteJoint(defStruct: physics2D_RevoluteJointDef): any {\n        let def = this._tempRevoluteJointDef;\n        var anchorVec = this.createPhyFromLayaVec2(defStruct.anchor.x, defStruct.anchor.y);\n        def.Initialize(defStruct.bodyA, defStruct.bodyB, anchorVec);\n        def.enableMotor = defStruct.enableMotor;\n        def.motorSpeed = defStruct.motorSpeed;\n        def.maxMotorTorque = defStruct.maxMotorTorque;\n        def.enableLimit = defStruct.enableLimit;\n        def.lowerAngle = defStruct.lowerAngle;\n        def.upperAngle = defStruct.upperAngle;\n        def.collideConnected = defStruct.collideConnected;\n        return this.createJoint(def, this.box2d.b2RevoluteJoint);\n    }\n\n    /** \n     * @param defStruct \n     * @returns\n     */\n    create_MotorJoint(defStruct: physics2D_MotorJointDef): any {\n        let def = this._tempMotorJointDef;\n        def.Initialize(defStruct.bodyA, defStruct.bodyB);\n        def.linearOffset = this.createPhyFromLayaVec2(defStruct.linearOffset.x, defStruct.linearOffset.y);\n        def.angularOffset = defStruct.angularOffset;\n        def.maxForce = defStruct.maxForce;\n        def.maxTorque = defStruct.maxTorque;\n        def.correctionFactor = defStruct.correctionFactor;\n        def.collideConnected = defStruct.collideConnected;\n        return this.createJoint(def, this.box2d.b2MotorJoint);\n    }\n\n    /** \n     * @param joint \n     * @param x \n     * @param y \n     */\n    set_MotorJoint_linearOffset(joint: any, x: number, y: number): void {\n        joint.SetLinearOffset(this.createPhyFromLayaVec2(x, y));\n    }\n\n    /** \n     * @param joint \n     * @param angular\n     */\n    set_MotorJoint_SetAngularOffset(joint: any, angular: number): void {\n        joint.SetAngularOffset(angular);\n    }\n\n    /** \n     * @param joint \n     * @param maxForce \n     */\n    set_MotorJoint_SetMaxForce(joint: any, maxForce: number): void {\n        joint.SetMaxForce(maxForce);\n    }\n\n    /** \n     * @param joint \n     * @param maxTorque \n     */\n    set_MotorJoint_SetMaxTorque(joint: any, maxTorque: number): void {\n        joint.SetMaxTorque(maxTorque);\n    }\n\n    /** \n     * @param joint \n     * @param correctionFactor \n     */\n    set_MotorJoint_SetCorrectionFactor(joint: any, correctionFactor: number): void {\n        joint.SetCorrectionFactor(correctionFactor);\n    }\n\n    /** \n     * @param def \n     * @returns\n     */\n    create_PrismaticJoint(def: physics2D_PrismaticJointDef): any {\n        let tdef = this._tempPrismaticJointDef;\n        let anchorVec = this.createPhyFromLayaVec2(def.anchor.x, def.anchor.y);\n        let axis = this.createPhyVec2(def.axis.x, def.axis.y);\n        tdef.Initialize(def.bodyA, def.bodyB, anchorVec, axis);\n        tdef.enableMotor = def.enableMotor;\n        tdef.motorSpeed = def.motorSpeed;\n        tdef.maxMotorForce = def.maxMotorForce;\n        tdef.enableLimit = def.enableLimit;\n        tdef.lowerTranslation = this.layaToPhyValue(def.lowerTranslation);\n        tdef.upperTranslation = this.layaToPhyValue(def.upperTranslation);\n        tdef.collideConnected = def.collideConnected;\n        return this.createJoint(tdef, this.box2d.b2PrismaticJoint);\n    }\n\n    /** \n     * @returns\n     */\n    create_boxColliderShape() {\n        return this._tempPolygonShape;\n    }\n\n    /** \n     * @param shape \n     * @param width \n     * @param height \n     * @param pos \n     * \n     */\n    set_collider_SetAsBox(shape: any, width: number, height: number, pos: IV2, scaleX: number, scaleY: number) {\n        width = this.layaToPhyValue(width * scaleX);\n        height = this.layaToPhyValue(height * scaleY);\n        let centroid = shape.m_centroid;\n        centroid.x = this.layaToPhyValue(pos.x * scaleX);\n        centroid.y = this.layaToPhyValue(pos.y * scaleY);\n        shape.SetAsBox(width, height, centroid, 0);\n    }\n\n    /** \n     * @returns\n     */\n    create_ChainShape() {\n        return this._tempChainShape;\n    }\n\n    /** \n     * @param shape \n     * @param x \n     * @param y \n     * @param arr \n     * @param loop \n     */\n    set_ChainShape_data(shape: any, x: number, y: number, arr: number[], loop: boolean, scaleX: number, scaleY: number) {\n        let len = arr.length;\n        var ptr_wrapped = this.createVec2Pointer(arr, x, y, scaleX, scaleY);\n        if (loop) {\n            shape.CreateLoop(ptr_wrapped, len >> 1);\n        } else {\n            shape.CreateChain(ptr_wrapped, len >> 1);\n        }\n    }\n\n    /** \n     * @returns\n     */\n    create_CircleShape() {\n        return this._tempCircleShape;\n    }\n\n\n    /** \n     * @param shape \n     * @param radius \n     */\n    set_CircleShape_radius(shape: any, radius: number, scale: number) {\n        shape.m_radius = this.layaToPhyValue(radius * scale);\n    }\n\n    /** \n     * @param shape \n     * @param x \n     * @param y \n     */\n    set_CircleShape_pos(shape: any, x: number, y: number, scale: number) {\n        shape.m_p.Set(this.layaToPhyValue(x * scale), this.layaToPhyValue(y * scale));\n    }\n\n    /** \n     * @returns\n     */\n    create_EdgeShape() {\n        return this._tempEdgeShape;\n    }\n\n    /** \n     * @param shape \n     * @param x \n     * @param y \n     * @param arr \n     */\n    set_EdgeShape_data(shape: any, x: number, y: number, arr: number[], scaleX: number, scaleY: number) {\n        let len = arr.length;\n        var ps: any[] = [];\n        for (var i: number = 0, n: number = len; i < n; i += 2) {\n            ps.push(this.createPhyFromLayaVec2((x + arr[i]) * scaleX, (y + arr[i + 1]) * scaleX));\n        }\n        shape.SetTwoSided(ps[0], ps[1])\n    }\n\n    /** \n     * @returns\n     */\n    create_PolygonShape() {\n        return this._tempPolygonShape;\n    }\n\n\n    /** \n    * @param shape \n    * @param x \n    * @param y \n    * @param arr \n    */\n    set_PolygonShape_data(shape: any, x: number, y: number, arr: number[], scaleX: number, scaleY: number) {\n        shape.Set(this.createVec2Pointer(arr, x, y, scaleX, scaleY), arr.length / 2);\n    }\n\n    /**\n     * create fixture descript\n     * @param fixtureDef \n     * @returns \n     */\n    createFixtureDef(fixtureDef: FixtureBox2DDef) {\n        var def: any = new this.box2d.b2FixtureDef();\n        def.density = fixtureDef.density;\n        def.friction = fixtureDef.friction;\n        def.isSensor = fixtureDef.isSensor;\n        def.restitution = fixtureDef.restitution;\n        switch (fixtureDef.shape) {\n            case PhysicsShape.BoxShape:\n            case PhysicsShape.PolygonShape:\n                def.set_shape(this._tempPolygonShape);\n                break;\n            case PhysicsShape.ChainShape:\n                def.set_shape(this._tempChainShape);\n                break;\n            case PhysicsShape.CircleShape:\n                def.set_shape(this._tempCircleShape)\n                break;\n            case PhysicsShape.EdgeShape:\n                def.set_shape(this._tempEdgeShape);\n                break;\n        }\n        def.world = this._world;\n        def.shapeType = fixtureDef.shape;\n        def._shape = this.get_fixtureshape(def.shape, fixtureDef.shape);\n        return def;\n    }\n\n    /** \n     * @param def \n     * @param groupIndex \n     */\n    set_fixtureDef_GroupIndex(def: any, groupIndex: number) {\n        def.filter.groupIndex = groupIndex;\n    }\n\n    /** \n     * @param def \n     * @param categoryBits \n     */\n    set_fixtureDef_CategoryBits(def: any, categoryBits: number) {\n        def.filter.categoryBits = categoryBits;\n    }\n\n    /** \n     * @param def \n     * @param maskbits \n     */\n    set_fixtureDef_maskBits(def: any, maskbits: number) {\n        def.filter.maskBits = maskbits;\n    }\n\n    /**\n    * create fixture by body and def\n    * @param body \n    * @param def \n    */\n    createfixture(body: any, fixtureDef: any) {\n        let data = body.CreateFixture(fixtureDef);\n        data.world = this._world;\n        data.shape = this.get_fixtureshape(data.GetShape(), fixtureDef.shapeType);\n        data.filter = data.GetFilterData();\n        return data;\n    }\n\n    /** \n     * @internal\n     */\n    resetFixtureData(fixture: any, fixtureDef: FixtureBox2DDef): void {\n        fixture.SetDensity(fixtureDef.density);\n        fixture.SetFriction(fixtureDef.friction);\n        fixture.SetSensor(fixtureDef.isSensor);\n        fixture.SetRestitution(fixtureDef.restitution);\n    }\n\n    /** \n     * @param fixture \n     * @param instance \n     */\n    set_fixture_collider(fixture: any, instance: ColliderBase) {\n        fixture.collider = instance;\n    }\n\n    /** \n     * @param fixture \n     */\n    get_fixture_body(fixture: any): any {\n        return fixture.GetBody()\n    }\n\n\n    /** \n     * @param body \n     * @param fixture \n     */\n    rigidBody_DestroyFixture(body: any, fixture: any) {\n        if (body.world && !body.world.destroyed) body.DestroyFixture(fixture);\n    }\n\n    /** \n     * @param rigidbodyDef \n     * @returns\n     */\n    rigidBodyDef_Create(rigidbodyDef: RigidBody2DInfo): any {\n        var def: any = new this.box2d.b2BodyDef();\n        def.position.Set(this.layaToPhyValue(rigidbodyDef.position.x), this.layaToPhyValue(rigidbodyDef.position.y));\n        def.angle = rigidbodyDef.angle;\n        def.allowSleep = rigidbodyDef.allowSleep;\n        def.angularDamping = rigidbodyDef.angularDamping;\n        def.angularVelocity = rigidbodyDef.angularVelocity;\n        def.bullet = rigidbodyDef.bullet;\n        def.fixedRotation = rigidbodyDef.fixedRotation;\n        def.gravityScale = rigidbodyDef.gravityScale;\n        def.linearDamping = rigidbodyDef.linearDamping;\n        def.linearVelocity = new this.box2d.b2Vec2(this.layaToPhyValue(rigidbodyDef.linearVelocity.x), this.layaToPhyValue(rigidbodyDef.linearVelocity.y));\n        def.type = this.getbodyType(rigidbodyDef.type);\n        return this.createBody(def);\n    }\n\n    /** \n     * @param body \n     * @param v2 \n     */\n    get_RigidBody_Position(body: any, v2: Vector2) {\n        var pos: any = body.GetPosition();\n        v2.setValue(this.phyToLayaValue(pos.x), this.phyToLayaValue(pos.y));\n    }\n\n\n    /** \n     * @param body \n     * @returns\n     */\n    get_RigidBody_Angle(body: any): number {\n        return body.GetAngle();\n    }\n\n    /** \n     * @param body \n     * @param x \n     * @param y \n     * @param angle \n     */\n    set_RigibBody_Transform(body: any, x: number, y: number, angle: any) {\n        let pos = body.GetPosition();\n        pos.x = this.layaToPhyValue(x);\n        pos.y = this.layaToPhyValue(y);\n        body.SetTransform(pos, angle);\n    }\n\n    /** \n     * @param body \n     * @param x \n     * @param y \n     * @returns\n     */\n    get_rigidBody_WorldPoint(body: any, x: number, y: number): IV2 {\n        let data = body.GetWorldPoint(this.createPhyFromLayaVec2(x, y))\n        let point: IV2 = { x: 0, y: 0 }\n        point.x = this.phyToLayaValue(data.x);\n        point.y = this.phyToLayaValue(data.y);\n        return point;\n    }\n\n    /** \n     * @param body \n     * @param x \n     * @param y \n     */\n    get_rigidBody_LocalPoint(body: any, x: number, y: number): IV2 {\n        let data = body.GetLocalPoint(this.createPhyFromLayaVec2(x, y))\n        let point: IV2 = { x: 0, y: 0 }\n        point.x = this.phyToLayaValue(data.x);\n        point.y = this.phyToLayaValue(data.y);\n        return point;\n    }\n\n    /** \n     * @param body \n     * @param force \n     * @param position \n     */\n    rigidBody_applyForce(body: any, force: IV2, position: IV2) {\n        this._tempVe21.x = this.layaToPhyValue(position.x);\n        this._tempVe21.y = this.layaToPhyValue(position.y);\n        this._tempVe22.x = force.x;\n        this._tempVe22.y = force.y;\n        body.ApplyForce(this._tempVe22, this._tempVe21, false);\n    }\n\n    /** \n     * @param body \n     * @param force \n     */\n    rigidBody_applyForceToCenter(body: any, force: IV2) {\n        body.ApplyForceToCenter(force);\n    }\n\n\n    /** \n     * @param body \n     * @param impulse \n     * @param position \n     */\n    rigidbody_ApplyLinearImpulse(body: any, impulse: IV2, position: IV2) {\n        body.ApplyLinearImpulse(impulse, position);\n    }\n\n    /** \n     * @param body \n     */\n    rigidbody_ApplyLinearImpulseToCenter(body: any, impulse: IV2) {\n        body.ApplyLinearImpulseToCenter(impulse);\n    }\n\n\n    /**\n    * 对刚体施加扭矩，使其旋转\n    * @param\ttorque\t施加的扭矩\n    */\n    rigidbody_applyTorque(body: any, torque: number): void {\n        body.ApplyTorque(torque);\n    }\n\n    /**\n     * 设置速度，比如{x:10,y:10}\n     * @param\tvelocity\n     */\n    set_rigidbody_Velocity(body: any, velocity: IV2): void {\n        body.SetLinearVelocity(velocity);\n    }\n\n    /**\n     * 设置角度\n     * @param\tvalue 单位为弧度\n     */\n    set_rigidbody_Awake(body: any, awake: boolean): void {\n        body.SetAwake(awake);\n    }\n\n    /** \n     * 获得刚体质量\n     * @param body \n     * @returns\n     */\n    get_rigidbody_Mass(body: any): number {\n        return body.GetMass();\n    }\n\n    /**\n     * 获得质心的相对节点0,0点的位置偏移\n     * @param body \n     * @returns\n     */\n    get_rigidBody_Center(body: any): IV2 {\n        let value = body.GetLocalCenter();\n        let point: IV2 = { x: 0, y: 0 }\n        point.x = this.phyToLayaValue(value.x);\n        point.y = this.phyToLayaValue(value.y);\n        return point;\n    }\n\n    /** \n     * @param body \n     */\n    get_rigidBody_IsAwake(body: any) {\n        return body.IsAwake();\n    }\n\n    /**\n     * 获得质心的世界坐标，相对于Physics.I.worldRoot节点\n     * @param body \n     * @returns\n     */\n    get_rigidBody_WorldCenter(body: any): IV2 {\n        let value = body.GetWorldCenter();\n        let point: IV2 = { x: 0, y: 0 }\n        point.x = this.phyToLayaValue(value.x);\n        point.y = this.phyToLayaValue(value.y);\n        return point;\n    }\n\n    /** \n     * @param body \n     * @param value \n     */\n    set_rigidBody_type(body: any, value: string) {\n        body.SetType(this.getbodyType(value));\n    }\n\n    /** \n     * @param body \n     * @param value \n     */\n    set_rigidBody_gravityScale(body: any, value: number) {\n        body.SetGravityScale(value);\n    }\n\n    /** \n     * @param body \n     * @param value \n     */\n    set_rigidBody_allowRotation(body: any, value: boolean) {\n        body.SetFixedRotation(!value);\n    }\n\n    /** \n     * @param body \n     * @param value \n     */\n    set_rigidBody_allowSleep(body: any, value: boolean) {\n        body.SetSleepingAllowed(value);\n    }\n\n    /** \n     * @param body \n     * @param value \n     */\n    set_rigidBody_angularDamping(body: any, value: number) {\n        body.SetAngularDamping(value);\n    }\n\n    /** \n     * @param body \n     * @returns\n     */\n    get_rigidBody_angularVelocity(body: any): number {\n        return body.GetAngularVelocity();\n    }\n\n    /** \n     * @param body \n     * @param value \n     */\n    set_rigidBody_angularVelocity(body: any, value: number) {\n        body.SetAngularVelocity(value);\n    }\n\n    /** \n     * @param body \n     * @param value \n     */\n    set_rigidBody_linearDamping(body: any, value: number) {\n        body.SetLinearDamping(value);\n    }\n\n    /** \n     * @param body \n     * @returns\n     */\n    get_rigidBody_linearVelocity(body: any): IV2 {\n        return body.GetLinearVelocity();\n    }\n\n    /** \n     * @param body \n     * @param value \n     */\n    set_rigidBody_linearVelocity(body: any, value: IV2) {\n        body.SetLinearVelocity(new this.box2d.b2Vec2(value.x, value.y));\n    }\n\n    /** \n     * @param body \n     * @param value \n     */\n    set_rigidBody_bullet(body: any, value: boolean) {\n        body.SetBullet(value);\n    }\n\n    /**\n    * @param body \n    */\n    retSet_rigidBody_MassData(body: any) {\n        body.ResetMassData()\n    }\n\n    /**@internal */\n    getbodyType(type: string): any {\n        if (type == \"dynamic\") {\n            return this.box2d.b2_dynamicBody;\n        } else if (type == \"static\") {\n            return this.box2d.b2_staticBody;\n        } else if (type == \"kinematic\") {\n            return this.box2d.b2_kinematicBody;\n        }\n    }\n\n    /**@internal */\n    makeStyleString(color: any, alpha: number = -1) {\n        let colorData = this.box2d.wrapPointer(color, this.box2d.b2Color);\n        let r = (colorData.r * 255).toFixed(1);\n        let g = (colorData.g * 255).toFixed(1);\n        let b = (colorData.b * 255).toFixed(1);\n\n        let cv: string;\n        if (alpha > 0) {\n            cv = `rgba(${r},${g},${b},${alpha})`;\n        }\n        else {\n            cv = `rgb(${r},${g},${b})`;\n        }\n        return cv;\n    }\n\n    /**@internal */\n    private getBox2DPoints(vertices: any, vertexCount: any) {\n        let i: number, len: number;\n        len = vertices.length;\n        let points: any[] = [];\n        for (i = 0; i < vertexCount; i++) {\n            let vert = this.box2d.wrapPointer(vertices + (i * 8), this.box2d.b2Vec2);\n            points.push(vert.get_x(), vert.get_y());\n        }\n        return points;\n    }\n\n    /**@internal */\n    DrawPolygon(vertices: any, vertexCount: any, color: any): void {\n        let points: any[] = this.getBox2DPoints(vertices, vertexCount);\n        this._debugDraw.mG.drawPoly(0, 0, points, null, this.makeStyleString(color, 1), this._debugDraw.lineWidth);\n    }\n\n    /**@internal */\n    DrawSolidPolygon(vertices: any, vertexCount: any, color: any): void {\n        let points: any[] = this.getBox2DPoints(vertices, vertexCount);\n        this._debugDraw.mG.drawPoly(0, 0, points, this.makeStyleString(color, 0.5), this.makeStyleString(color, 1), this._debugDraw.lineWidth);\n    }\n\n    /**@internal */\n    DrawCircle(center: any, radius: any, color: any): void {\n        let centerV = this.box2d.wrapPointer(center, this.box2d.b2Vec2);\n        this._debugDraw.mG.drawCircle(centerV.x, centerV.y, radius, null, this.makeStyleString(color, 1), this._debugDraw.lineWidth);\n    }\n\n    /**@internal */\n    DrawSolidCircle(center: any, radius: any, axis: any, color: any): void {\n        center = this.box2d.wrapPointer(center, this.box2d.b2Vec2);\n        axis = this.box2d.wrapPointer(axis, this.box2d.b2Vec2);\n        let cx: any = center.x;\n        let cy: any = center.y;\n        this._debugDraw.mG.drawCircle(cx, cy, radius, this.makeStyleString(color, 0.5), this.makeStyleString(color, 1), this._debugDraw.lineWidth);\n        this._debugDraw.mG.drawLine(cx, cy, (cx + axis.x * radius), (cy + axis.y * radius), this.makeStyleString(color, 1), this._debugDraw.lineWidth);\n    }\n\n    /**@internal */\n    DrawSegment(p1: any, p2: any, color: any): void {\n        p1 = this.box2d.wrapPointer(p1, this.box2d.b2Vec2);\n        p2 = this.box2d.wrapPointer(p2, this.box2d.b2Vec2);\n        this._debugDraw.mG.drawLine(p1.x, p1.y, p2.x, p2.y, this.makeStyleString(color, 1), this._debugDraw.lineWidth);\n    }\n\n    /**@internal */\n    DrawTransform(xf: any): void {\n        xf = this.box2d.wrapPointer(xf, this.box2d.b2Transform);\n        this._debugDraw.PushTransform(xf.p.x, xf.p.y, xf.q.GetAngle());\n        const length = 1 / Browser.pixelRatio;\n        this._debugDraw.mG.drawLine(0, 0, length, 0, this._debugDraw.Red, this._debugDraw.lineWidth);\n        this._debugDraw.mG.drawLine(0, 0, 0, length, this._debugDraw.Green, this._debugDraw.lineWidth);\n        this._debugDraw.PopTransform();\n    }\n\n    /**@internal */\n    DrawPoint(p: any, size: any, color: any): void {\n        p = this.box2d.wrapPointer(p, this.box2d.b2Vec2);\n        size *= this._debugDraw.camera.m_zoom;\n        size /= this._debugDraw.camera.m_extent;\n        size /= Browser.pixelRatio;\n        var hsize: any = size / 2;\n        this._debugDraw.mG.drawRect(p.x - hsize, p.y - hsize, size, size, this.makeStyleString(color, 1), null);\n    }\n\n    /**@internal */\n    DrawString(x: any, y: any, message: any): void {\n        this._debugDraw.textG.fillText(message, x, y, \"15px DroidSans\", this._debugDraw.DrawString_color, \"left\");\n    }\n\n    /**@internal */\n    DrawStringWorld(x: any, y: any, message: any): void {\n        this.DrawString(x, y, message);\n    }\n\n    /**@internal */\n    DrawAABB(min: any, max: any, color: any): void {\n        min = this.box2d.wrapPointer(min, this.box2d.b2Vec2);\n        max = this.box2d.wrapPointer(max, this.box2d.b2Vec2);\n        var cx: number = (max.x + min.x) * 0.5;\n        var cy: number = (max.y + min.y) * 0.5;\n        var hw: number = (max.x - min.x) * 0.5;\n        var hh: number = (max.y - min.y) * 0.5;\n        const cs: string = this.makeStyleString(color, 1);\n        const linew: number = this._debugDraw.lineWidth;\n        this._debugDraw.mG.drawLine(cx - hw, cy - hh, cx + hw, cy - hh, cs, linew);\n        this._debugDraw.mG.drawLine(cx - hw, cy + hh, cx + hw, cy + hh, cs, linew);\n        this._debugDraw.mG.drawLine(cx - hw, cy - hh, cx - hw, cy + hh, cs, linew);\n        this._debugDraw.mG.drawLine(cx + hw, cy - hh, cx + hw, cy + hh, cs, linew);\n    }\n\n    /**@internal */\n    getContactListener() {\n        let box2d = this.box2d;\n        let _this = this;\n        var listner = new this.box2d.JSContactListener();\n        listner.BeginContact = function (contact: any): void {\n            Physics2D.I._eventList.push(\"triggerenter\", box2d.wrapPointer(contact, box2d.b2Contact));\n        }\n\n        listner.EndContact = function (contact: any): void {\n            Physics2D.I._eventList.push(\"triggerexit\", box2d.wrapPointer(contact, box2d.b2Contact));\n        }\n\n        listner.PreSolve = function (contact: any, oldManifold: any): void {\n            Physics2D.I._eventList.push(\"triggerstay\", box2d.wrapPointer(contact, box2d.b2Contact));\n        }\n\n        listner.PostSolve = function (contact: any, impulse: any): void {\n            //console.log(\"PostSolve\", contact);\n        }\n        return listner;\n    }\n\n    /**@internal */\n    getDestructionListener() {\n        var listner = new this.box2d.JSDestructionListener();\n        let box2d = this.box2d;\n        listner.SayGoodbyeJoint = function (joint: any): void {\n            joint = box2d.wrapPointer(joint, box2d.b2Joint);\n            joint.GetUserData().pointer = -1;\n        }\n        listner.SayGoodbyeFixture = function (fixture: any): void {\n            fixture = box2d.wrapPointer(fixture, box2d.b2Fixture);\n            fixture.GetUserData().pointer = -1;\n        }\n        return listner;\n    }\n\n    /**@internal */\n    castObject(pointer: any, cls: any) {\n        return this.box2d.castObject(pointer, cls)\n    }\n\n    /**@internal */\n    createWrapPointer(points: number[]): any {\n        var len: number = points.length;\n        var buffer = this.box2d._malloc(len * 4);\n        var offset = 0;\n        for (var i: number = 0; i < len; i++) {\n            this.box2d.HEAPF32[buffer + offset >> 2] = this.layaToPhyValue(points[i]);\n            offset += 4;\n        }\n        return this.box2d.wrapPointer(buffer, this.box2d.b2Vec2);\n    }\n\n    /**@internal */\n    createVec2Pointer(points: number[], x: number, y: number, scaleX: number, scaleY: number): any {\n        var len: number = points.length >> 1;\n        var buffer = this.box2d._malloc(len * 8);\n        var offset = 0;\n        for (var i = 0; i < len; i++) {\n            this.box2d.HEAPF32[buffer + offset >> 2] = this.layaToPhyValue((points[2 * i] + x) * scaleX);\n            this.box2d.HEAPF32[buffer + (offset + 4) >> 2] = this.layaToPhyValue((points[2 * i + 1] + y) * scaleY);\n            offset += 8;\n        }\n        return this.box2d.wrapPointer(buffer, this.box2d.b2Vec2);\n    }\n\n    /**@internal */\n    b2LinearStiffness(def: any, frequencyHertz: number, dampingRatio: number, bodyA: any, bodyB: any) {\n        if (bodyA == undefined || bodyB == undefined) {\n            def.stiffness = 0;\n            def.damping = 0;\n            return;\n        }\n        const massA = bodyA.GetMass();\n        const massB = bodyB.GetMass();\n        let mass;\n        if (massA > 0.0 && massB > 0.0) {\n            mass = massA * massB / (massA + massB);\n        }\n        else if (massA > 0.0) {\n            mass = massA;\n        }\n        else {\n            mass = massB;\n        }\n        const omega = 2.0 * Math.PI * frequencyHertz;\n        def.stiffness = mass * omega * omega;\n        def.damping = 2.0 * mass * dampingRatio * omega;\n    }\n\n    /**\n     * @internal \n     * Utility to compute rotational stiffness values frequency and damping ratio\n    */\n    b2AngularStiffness(def: any, frequencyHertz: number, dampingRatio: number, bodyA: any, bodyB: any) {\n        const IA = bodyA.GetInertia();\n        const IB = bodyB.GetInertia();\n        let I;\n        if (IA > 0.0 && IB > 0.0) {\n            I = IA * IB / (IA + IB);\n        }\n        else if (IA > 0.0) {\n            I = IA;\n        }\n        else {\n            I = IB;\n        }\n        const omega = 2.0 * Math.PI * frequencyHertz;\n        def.stiffness = I * omega * omega;\n        def.damping = 2.0 * I * dampingRatio * omega;\n    }\n\n    /**\n     * @internal \n    */\n    getVec2Length(p1: any, p2: any) {\n        return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2))\n    }\n\n    /**\n     * @internal \n    */\n    isNullData(data: any) {\n        return this.box2d.compare(data, this.box2d.NULL)\n    }\n\n    /**\n    * @internal \n   */\n    destory(data: any) {\n        data.__destroy__();\n    }\n\n    /** \n     * @internal\n     */\n    get_fixtureshape(shape: any, physicShape: PhysicsShape): any {\n        switch (physicShape) {\n            case PhysicsShape.BoxShape:\n            case PhysicsShape.PolygonShape:\n                return this.castObject(shape, this.box2d.b2PolygonShape);\n                break;\n            case PhysicsShape.ChainShape:\n                return this.castObject(shape, this.box2d.b2ChainShape);\n                break;\n            case PhysicsShape.CircleShape:\n                return this.castObject(shape, this.box2d.b2CircleShape);\n                break;\n            case PhysicsShape.EdgeShape:\n                return this.castObject(shape, this.box2d.b2EdgeShape);\n                break;\n        }\n    }\n}\n\nPhysics2D.I._factory = new physics2DwasmFactory()"],"mappings":"kCAkBaA,qBAAbC,cAiBIC,KAAmBC,oBAAW,EAG9BD,KAAmBE,oBAAW,C,CAsD1BC,qBACA,OAAO,C,CAMPC,yBACA,OAAOJ,KAAKK,OAAOC,OAAOC,U,CAM1BC,yBACA,OAAOR,KAAKK,OAAOC,OAAOG,U,CAM1BC,wBACA,OAAOV,KAAKK,OAAOC,OAAOK,S,CAM1BC,wBACA,OAAOZ,KAAKK,OAAOC,OAAOO,S,CAM1BC,gCACA,OAAOd,KAAKK,OAAOC,OAAOS,iB,CAM1BC,oBACA,OAAO,E,CAMPC,YACA,OAAOjB,KAAKK,M,CAMZa,YACA,OAAOlB,KAAKmB,M,CAMZC,gBACA,OAAOpB,KAAKqB,U,CAMZC,kBACA,OAAOtB,KAAKuB,Y,CAMZC,yBACA,OAAOxB,KAAKC,mB,CAMZwB,yBACA,OAAOzB,KAAKE,mB,CAQZwB,cACA,OAAO1B,KAAKkB,MAAMS,Y,CAGlBD,YAAQE,GACR,IAAIF,EAAe1B,KAAK6B,cAAcD,EAAME,EAAGF,EAAMG,GACrD/B,KAAKkB,MAAMc,WAAWN,E,CAOtBO,oBACA,OAAOjC,KAAKkB,MAAMgB,kB,CAGlBD,kBAAcL,GACd5B,KAAKkB,MAAMiB,iBAAiBP,E,CAK5BQ,gBACA,OAAOpC,KAAKkB,MAAMmB,c,CAIlBC,mBACA,OAAOtC,KAAKkB,MAAMqB,iB,CAIlBC,iBACA,OAAOxC,KAAKkB,MAAMuB,e,CAQtBC,eAAed,GACX,OAAOA,EAAQ5B,KAAK2C,e,CAOxBC,eAAehB,GACX,OAAOA,EAAQ5B,KAAKsB,W,CASxBO,cAAcC,EAAWC,GACrB,OAAO,IAAI/B,KAAKiB,MAAM4B,OAAOf,EAAGC,E,CASpCe,sBAAsBhB,EAAWC,GAC7B,OAAO,IAAI/B,KAAKiB,MAAM4B,OAAO7C,KAAK0C,eAAeZ,GAAI9B,KAAK0C,eAAeX,G,CAO7EgB,aACI,OAAQC,OAAeC,QAAQC,MAAMjC,IACjCjB,KAAKK,OAASY,EACdjB,KAAKK,OAAO8C,kBAAoBnD,KAAKmD,kBAC9BC,QAAQC,Y,CAOvBC,QACItD,KAAKuB,aAAegC,kBAAgBC,WAAaC,UAAQD,WACzDxD,KAAK2C,gBAAkB,EAAI3C,KAAKuB,aAChC,IAAIG,EAAe1B,KAAK6B,cAAc0B,kBAAgB7B,QAAQI,EAAGyB,kBAAgB7B,QAAQK,GACzF/B,KAAKmB,OAAS,IAAInB,KAAKiB,MAAMyC,QAAQhC,GACrC1B,KAAKmB,OAAOwC,WAAY,EAExB3D,KAAK4D,UAAY,IAAI5D,KAAKiB,MAAM4B,OAChC7C,KAAK6D,UAAY,IAAI7D,KAAKiB,MAAM4B,OAEhC7C,KAAK8D,kBAAoB,IAAI9D,KAAKiB,MAAM8C,eACxC/D,KAAKgE,gBAAkB,IAAIhE,KAAKiB,MAAMgD,aACtCjE,KAAKkE,iBAAmB,IAAIlE,KAAKiB,MAAMkD,cACvCnE,KAAKoE,eAAiB,IAAIpE,KAAKiB,MAAMoD,YAErCrE,KAAKsE,sBAAwB,IAAItE,KAAKiB,MAAMsD,mBAC5CvE,KAAKwE,iBAAmB,IAAIxE,KAAKiB,MAAMwD,eACvCzE,KAAK0E,oBAAsB,IAAI1E,KAAKiB,MAAM0D,iBAC1C3E,KAAK4E,mBAAqB,IAAI5E,KAAKiB,MAAM4D,gBACzC7E,KAAK8E,kBAAoB,IAAI9E,KAAKiB,MAAM8D,eACxC/E,KAAKgF,mBAAqB,IAAIhF,KAAKiB,MAAMgE,gBACzCjF,KAAKkF,sBAAwB,IAAIlF,KAAKiB,MAAMkE,mBAC5CnF,KAAKoF,mBAAqB,IAAIpF,KAAKiB,MAAMoE,gBACzCrF,KAAKsF,uBAAyB,IAAItF,KAAKiB,MAAMsE,oBAC7CvF,KAAKwF,mBAAqB,IAAIxF,KAAKiB,MAAMwE,gBAEzCzF,KAAKkB,MAAMwE,uBAAuB1F,KAAK2F,0BACvC3F,KAAKkB,MAAM0E,mBAAmB5F,KAAK6F,sBACnC7F,KAAKiC,cAAiD,MAAjCsB,kBAAgBtB,eAA+BsB,kBAAgBtB,cACpFjC,KAAKC,oBAAsBsD,kBAAgB/B,mBAC3CxB,KAAKE,oBAAsBqD,kBAAgB9B,kB,CAQ/CqE,eACQ9F,KAAK4D,YACL5D,KAAK+F,QAAQ/F,KAAK4D,WAClB5D,KAAK4D,UAAY,MAEjB5D,KAAK6D,YACL7D,KAAK+F,QAAQ/F,KAAK6D,WAClB7D,KAAK6D,UAAY,MAGjB7D,KAAK8D,oBACL9D,KAAK+F,QAAQ/F,KAAK8D,mBAClB9D,KAAK8D,kBAAoB,MAEzB9D,KAAKgE,kBACLhE,KAAK+F,QAAQ/F,KAAKgE,iBAClBhE,KAAKgE,gBAAkB,MAEvBhE,KAAKkE,mBACLlE,KAAK+F,QAAQ/F,KAAKkE,kBAClBlE,KAAKkE,iBAAmB,MAExBlE,KAAKoE,iBACLpE,KAAK+F,QAAQ/F,KAAKoE,gBAClBpE,KAAKoE,eAAiB,MAGtBpE,KAAKsE,wBACLtE,KAAK+F,QAAQ/F,KAAKsE,uBAClBtE,KAAKsE,sBAAwB,MAE7BtE,KAAKwE,mBACLxE,KAAK+F,QAAQ/F,KAAKwE,kBAClBxE,KAAKwE,iBAAmB,MAExBxE,KAAK0E,sBACL1E,KAAK+F,QAAQ/F,KAAK0E,qBAClB1E,KAAK0E,oBAAsB,MAE3B1E,KAAK4E,qBACL5E,KAAK+F,QAAQ/F,KAAK4E,oBAClB5E,KAAK4E,mBAAqB,MAE1B5E,KAAK8E,oBACL9E,KAAK+F,QAAQ/F,KAAK8E,mBAClB9E,KAAK8E,kBAAoB,MAEzB9E,KAAKgF,qBACLhF,KAAK+F,QAAQ/F,KAAKgF,oBAClBhF,KAAKgF,mBAAqB,MAE1BhF,KAAKkF,wBACLlF,KAAK+F,QAAQ/F,KAAKkF,uBAClBlF,KAAKkF,sBAAwB,MAE7BlF,KAAKoF,qBACLpF,KAAK+F,QAAQ/F,KAAKoF,oBAClBpF,KAAKoF,mBAAqB,MAE1BpF,KAAKsF,yBACLtF,KAAK+F,QAAQ/F,KAAKsF,wBAClBtF,KAAKsF,uBAAyB,MAG9BtF,KAAKwF,qBACLxF,KAAK+F,QAAQ/F,KAAKwF,oBAClBxF,KAAKwF,mBAAqB,MAG1BxF,KAAKmB,SACLnB,KAAKiB,MAAM+E,QAAQhG,KAAKmB,QACxBnB,KAAKmB,OAAOwC,WAAY,EACxB3D,KAAKmB,OAAS,MAElBnB,KAAKiG,QAAU,KACXjG,KAAKqB,aACLrB,KAAKqB,WAAW6E,aAChBlG,KAAKqB,WAAa,K,CAQ1B8E,OAAOC,GAGHpG,KAAKmB,OAASnB,KAAKmB,OAAOkF,KAAKD,EAAOpG,KAAKwB,mBAAoBxB,KAAKyB,mBAAoB,E,CAU5F6E,UAAUC,EAAcC,GACpB,GAA6B,MAAzBA,EAAQC,eAAkD,MAAzBD,EAAQE,cACzC,OAEJ,IAAIC,EAAiBH,EAAQC,cAAcG,SACvCC,EAAiBL,EAAQE,cAAcE,SAC3C,GAAiB,MAAbD,GAAkC,MAAbE,EACrB,OAEJ,GAAIF,EAAUhD,WAAakD,EAAUlD,UACjC,OAEJ,IAAImD,EAAcH,EAAUI,MACxBC,EAAcH,EAAUE,MACxBE,EAASjH,KAUb,GATAwG,EAAQU,WAAa,WACjB,IAAIC,EAAgBF,EAAOzB,mBAC3BxF,KAAKoH,iBAAiBD,GAEtB,IAAIE,EAASF,EAASG,OAGtB,OAFAD,EAAEvF,EAAImF,EAAOrE,eAAeyE,EAAEvF,GAC9BuF,EAAEtF,EAAIkF,EAAOrE,eAAeyE,EAAEtF,GACvBoF,CACX,EACIL,EAAQ,CACR,IAAIS,EAAc,CAACV,EAAWF,EAAWH,GACzCM,EAAOU,MAAMjB,EAAMgB,EACtB,CACGP,IACAO,EAAO,CAACZ,EAAWE,EAAWL,GAC9BQ,EAAOQ,MAAMjB,EAAMgB,G,CAQ3BE,gBAAgBC,GACZ,IAAI1H,KAAKqB,WAAT,CAKA,GAJArB,KAAKqB,WAAa,IAAIsG,qBAAmB3H,MACzC4H,QAAMC,MAAMC,SAAS9H,KAAKqB,YAC1BrB,KAAKqB,WAAW0G,OAAS,IAEL,MAAhB/H,KAAKiG,QAAiB,CACtB,IAAI+B,EAAShI,KAAKiG,QAAU,IAAIjG,KAAKiB,MAAMgH,OAC3CD,EAAOE,SAASR,GAChBM,EAAOG,YAAcnI,KAAKmI,YAAYC,KAAKpI,MAC3CgI,EAAOK,YAAcrI,KAAKqI,YAAYD,KAAKpI,MAC3CgI,EAAOM,iBAAmBtI,KAAKsI,iBAAiBF,KAAKpI,MACrDgI,EAAOO,WAAavI,KAAKuI,WAAWH,KAAKpI,MACzCgI,EAAOQ,gBAAkBxI,KAAKwI,gBAAgBJ,KAAKpI,MACnDgI,EAAOS,cAAgBzI,KAAKyI,cAAcL,KAAKpI,MAC/CgI,EAAOU,UAAY1I,KAAK0I,UAAUN,KAAKpI,MACvCgI,EAAOW,SAAW3I,KAAK2I,SAASP,KAAKpI,KACxC,CAEDA,KAAKkB,MAAM0H,aAAa5I,KAAKiG,QAlBR,C,CAyBzB4C,kBACS7I,KAAKqB,aACVrB,KAAKkB,MAAM0H,aAAa,MACxB5I,KAAKqB,WAAW6E,aAChBlG,KAAKqB,WAAW2E,UAChBhG,KAAKqB,WAAa,K,CAOtByH,aAAapB,GACL1H,KAAKiG,SAASjG,KAAKiG,QAAQiC,SAASR,E,CAO5CqB,YAAYrB,GACJ1H,KAAKiG,SAASjG,KAAKiG,QAAQ+C,YAAYtB,E,CAO/CuB,WAAWvB,GACH1H,KAAKiG,SAASjG,KAAKiG,QAAQiD,WAAWxB,E,CAS9CyB,YAAYrH,EAAWC,GACnB/B,KAAKmB,OAASnB,KAAKkB,MAAMkI,YAAY,CAAEtH,EAAGA,EAAGC,EAAGA,G,CAQpDsH,WAAWC,GAKP,GAJKA,IACDA,EAAM,IAAItJ,KAAKiB,MAAMsI,WAEzBD,EAAIE,SAAW,CAAEC,QAAS,GACtBzJ,KAAKkB,MAAO,CACZ,IAAIwI,EAAO1J,KAAKkB,MAAMyI,WAAWL,GAEjC,OADAI,EAAKxI,MAAQlB,KAAKkB,MACXwI,CACV,CAEG,OADAE,QAAQC,MAAM,0EACP,I,CAQfC,WAAWJ,GACP,IAAIxI,EAAQwI,EAAKxI,MACZA,EAAMyC,WAAWzC,EAAM6I,YAAYL,E,CAQ5CM,YAAYV,EAAUW,EAAW,MAC7B,GAAIjK,KAAKkB,MAAO,CACZ,IAAIgJ,EAAQlK,KAAKkB,MAAMiJ,YAAYb,GAMnC,OALW,MAAPW,IACAC,EAAQlK,KAAKoK,WAAWF,EAAOD,IAEnCC,EAAMG,WAAa,GACnBH,EAAMhJ,MAAQlB,KAAKmB,OACZ+I,CACV,CAEG,OADAN,QAAQC,MAAM,0EACP,I,CAQfS,YAAYJ,GACJA,GAASA,EAAMhJ,QAAUgJ,EAAMhJ,MAAMyC,WACrCuG,EAAMhJ,MAAMqJ,aAAaL,E,CAMjCM,kBAAkBN,GACd,OAAOA,EAAMO,a,CAMjBC,0BAA0BR,GACtB,OAAuC,GAAhCA,EAAMO,cAAchB,O,CAO/BkB,sBAAsBT,EAAYU,GAC9BV,EAAMW,YAAYD,E,CAOtBE,wBAAwBZ,EAAYa,GAChCb,EAAMc,cAAcD,E,CAOxBE,4BAA4Bf,EAAYgB,GACpChB,EAAMiB,kBAAkBD,E,CAO5BE,sBAAsBlB,EAAYmB,GAC9BnB,EAAMoB,YAAYD,E,CAQtBE,oBAAoBrB,EAAYsB,EAAoBC,GAChDvB,EAAMwB,UAAUF,EAAYC,E,CAShCE,mCAAmCC,EAAYC,EAAmBC,EAAsBC,GACpF,IAAIC,EAAW,GACfhM,KAAKiB,MAAMgL,mBAAmBD,EAAKH,EAAWC,EAAcF,EAAMM,WAAYN,EAAMO,YAC/EJ,GACDH,EAAMQ,aAAaJ,EAAIK,WAE3BT,EAAMU,WAAWN,EAAIO,Q,CAOzBC,oBAAoBC,GAChB,MAAMnD,EAAMtJ,KAAKsE,sBASjB,GARAgF,EAAIoD,MAAQD,EAAUC,MACtBpD,EAAIqD,MAAQF,EAAUE,MACtBrD,EAAIsD,aAAaC,IAAI7M,KAAK0C,eAAe+J,EAAUG,aAAa9K,GAAI9B,KAAK0C,eAAe+J,EAAUG,aAAa7K,IAC/GuH,EAAIwD,aAAaD,IAAI7M,KAAK0C,eAAe+J,EAAUK,aAAahL,GAAI9B,KAAK0C,eAAe+J,EAAUK,aAAa/K,IAE/G/B,KAAKmD,kBAAkBmG,EAAKmD,EAAUZ,UAAWY,EAAUX,aAAcxC,EAAIoD,MAAOpD,EAAIqD,OACxFrD,EAAIyD,qBAAqBN,EAAUO,kBAE/BP,EAAUQ,OAAS,EACnB3D,EAAI2D,OAASjN,KAAK0C,eAAe+J,EAAUQ,YACxC,CACH,IAAIC,EAAU5D,EAAIoD,MAAMS,cAAc7D,EAAIsD,cAC1C,IAAIQ,EAAO,CAAEtL,EAAGoL,EAAGpL,EAAGC,EAAGmL,EAAGnL,GAC5B,IAAIsL,EAAU/D,EAAIqD,MAAMQ,cAAc7D,EAAIwD,cAC1CxD,EAAI2D,OAASjN,KAAKsN,cAAcF,EAAMC,EACzC,CAYD,OAVIZ,EAAUc,UAAY,EACtBjE,EAAIiE,UAAYvN,KAAK0C,eAAe+J,EAAUc,WAE9CjE,EAAIiE,UAjpBI,KAmpBRd,EAAUe,UAAY,EACtBlE,EAAIkE,UAAYxN,KAAK0C,eAAe+J,EAAUe,WAE9ClE,EAAIkE,UAAY,EAEbxN,KAAKgK,YAAYV,EAAKtJ,KAAKiB,MAAMwM,gB,CAO5CC,yBAAyBxD,EAAY+C,GACjC/C,EAAMyD,UAAU3N,KAAK0C,eAAeuK,G,CAOxCW,4BAA4B1D,EAAY+C,GACpC/C,EAAM2D,aAAa7N,KAAK0C,eAAeuK,G,CAO3Ca,4BAA4B5D,EAAY+C,GACpC/C,EAAM6D,aAAa/N,KAAK0C,eAAeuK,G,CAQ3Ce,kCAAkC9D,EAAY+D,EAAmB1B,GAC7D,IAAIP,EAAW,GACXU,EAAQxC,EAAMgC,WACdS,EAAQzC,EAAMiC,WAClBnM,KAAKiB,MAAMkC,kBAAkB6I,EAAKiC,EAAW1B,EAASG,EAAOC,GAC7DzC,EAAMkC,aAAaJ,EAAIK,WACvBnC,EAAMoC,WAAWN,EAAIO,Q,CAOzB2B,iBAAiBzB,GACb,IAAInD,EAAMtJ,KAAKwE,iBAOf,OANA8E,EAAIoD,MAAQD,EAAUC,MACtBpD,EAAIqD,MAAQF,EAAUE,MACtBrD,EAAI6E,OAAS1B,EAAU0B,OACvB7E,EAAI8E,OAAS3B,EAAU2B,OACvB9E,EAAI+E,MAAQ5B,EAAU4B,MACtB/E,EAAI0D,iBAAmBP,EAAUO,iBAC1BhN,KAAKgK,YAAYV,EAAKtJ,KAAKiB,MAAMqN,Y,CAO5CC,uBAAuBrE,EAAYsE,GAC/BtE,EAAMuE,SAASD,E,CAOnBE,mBAAmBjC,GACf,IAAInD,EAAMtJ,KAAK0E,oBACXiK,EAAa3O,KAAK8C,sBAAsB2J,EAAUmC,cAAc9M,EAAG2K,EAAUmC,cAAc7M,GAC3F8M,EAAa7O,KAAK8C,sBAAsB2J,EAAUqC,cAAchN,EAAG2K,EAAUqC,cAAc/M,GAC3FgN,EAAa/O,KAAK8C,sBAAsB2J,EAAUG,aAAa9K,EAAG2K,EAAUG,aAAa7K,GACzFiN,EAAahP,KAAK8C,sBAAsB2J,EAAUK,aAAahL,EAAG2K,EAAUK,aAAa/K,GAG7F,OAFAuH,EAAI2F,WAAWxC,EAAUC,MAAOD,EAAUE,MAAOgC,EAAYE,EAAYE,EAAYC,EAAYvC,EAAU4B,OAC3G/E,EAAI0D,iBAAmBP,EAAUO,iBAC1BhN,KAAKgK,YAAYV,EAAKtJ,KAAKiB,MAAMiO,c,CAO5CC,kBAAkB1C,GACd,IAAInD,EAAMtJ,KAAK4E,mBACXwK,EAAYpP,KAAK8C,sBAAsB2J,EAAU4C,OAAOvN,EAAG2K,EAAU4C,OAAOtN,GAC5EuN,EAAOtP,KAAK6B,cAAc4K,EAAU6C,KAAKxN,EAAG2K,EAAU6C,KAAKvN,GAU/D,OATAuH,EAAI2F,WAAWxC,EAAUC,MAAOD,EAAUE,MAAOyC,EAAWE,GAC5DhG,EAAIsB,YAAc6B,EAAU7B,YAC5BtB,EAAIyB,WAAa0B,EAAU1B,WAC3BzB,EAAIiG,eAAiB9C,EAAU8C,eAC/BvP,KAAKmD,kBAAkBmG,EAAKmD,EAAUZ,UAAWY,EAAUX,aAAcxC,EAAIoD,MAAOpD,EAAIqD,OACxFrD,EAAI0D,iBAAmBP,EAAUO,iBACjC1D,EAAI+B,YAAcoB,EAAUpB,YAC5B/B,EAAIkG,iBAAmBxP,KAAK0C,eAAe+J,EAAU+C,kBACrDlG,EAAImG,iBAAmBzP,KAAK0C,eAAe+J,EAAUgD,kBAC9CzP,KAAKgK,YAAYV,EAAKtJ,KAAKiB,MAAMyO,a,CAO5CC,iBAAiBlD,GACb,IAAInD,EAAMtJ,KAAK8E,kBACXsK,EAAYpP,KAAK8C,sBAAsB2J,EAAU4C,OAAOvN,EAAG2K,EAAU4C,OAAOtN,GAIhF,OAHAuH,EAAI2F,WAAWxC,EAAUC,MAAOD,EAAUE,MAAOyC,GACjDpP,KAAKiM,mBAAmB3C,EAAKmD,EAAUZ,UAAWY,EAAUX,aAAcW,EAAUC,MAAOD,EAAUE,OACrGrD,EAAI0D,iBAAmBP,EAAUO,iBAC1BhN,KAAKgK,YAAYV,EAAKtJ,KAAKiB,MAAM2O,Y,CAO5CC,kBAAkBpD,GACd,IAAInD,EAAMtJ,KAAKgF,mBAOf,OANAsE,EAAIoD,MAAQD,EAAUC,MACtBpD,EAAIqD,MAAQF,EAAUE,MACtBrD,EAAIwG,OAAS9P,KAAK8C,sBAAsB2J,EAAUqD,OAAOhO,EAAG2K,EAAUqD,OAAO/N,GAC7EuH,EAAIyG,SAAWtD,EAAUsD,SAAWtD,EAAUE,MAAMqD,UACpD1G,EAAI0D,kBAAmB,EACvBhN,KAAKmD,kBAAkBmG,EAAKmD,EAAUZ,UAAWY,EAAUX,aAAcW,EAAUC,MAAOD,EAAUE,OAC7F3M,KAAKgK,YAAYV,EAAKtJ,KAAKiB,MAAMgP,a,CAQ5CC,sBAAsBhG,EAAYpI,EAAWC,GACzC/B,KAAK4D,UAAU9B,EAAI9B,KAAK0C,eAAeZ,GACvC9B,KAAK4D,UAAU7B,EAAI/B,KAAK0C,eAAeX,GACvCmI,EAAMiG,UAAUnQ,KAAK4D,U,CAQzBwM,wCAAwCxE,EAAYC,EAAmBC,GACnE9L,KAAKgO,kCAAkCpC,EAAOC,EAAWC,E,CAO7DuE,qBAAqB5D,GACjB,IAAInD,EAAMtJ,KAAKkF,sBACf,IAAIkK,EAAYpP,KAAK8C,sBAAsB2J,EAAU4C,OAAOvN,EAAG2K,EAAU4C,OAAOtN,GAShF,OARAuH,EAAI2F,WAAWxC,EAAUC,MAAOD,EAAUE,MAAOyC,GACjD9F,EAAIsB,YAAc6B,EAAU7B,YAC5BtB,EAAIyB,WAAa0B,EAAU1B,WAC3BzB,EAAIiG,eAAiB9C,EAAU8C,eAC/BjG,EAAI+B,YAAcoB,EAAUpB,YAC5B/B,EAAIkC,WAAaiB,EAAUjB,WAC3BlC,EAAImC,WAAagB,EAAUhB,WAC3BnC,EAAI0D,iBAAmBP,EAAUO,iBAC1BhN,KAAKgK,YAAYV,EAAKtJ,KAAKiB,MAAMqP,gB,CAO5CC,kBAAkB9D,GACd,IAAInD,EAAMtJ,KAAKoF,mBAQf,OAPAkE,EAAI2F,WAAWxC,EAAUC,MAAOD,EAAUE,OAC1CrD,EAAIkH,aAAexQ,KAAK8C,sBAAsB2J,EAAU+D,aAAa1O,EAAG2K,EAAU+D,aAAazO,GAC/FuH,EAAImH,cAAgBhE,EAAUgE,cAC9BnH,EAAIyG,SAAWtD,EAAUsD,SACzBzG,EAAI4B,UAAYuB,EAAUvB,UAC1B5B,EAAIoH,iBAAmBjE,EAAUiE,iBACjCpH,EAAI0D,iBAAmBP,EAAUO,iBAC1BhN,KAAKgK,YAAYV,EAAKtJ,KAAKiB,MAAM0P,a,CAQ5CC,4BAA4B1G,EAAYpI,EAAWC,GAC/CmI,EAAM2G,gBAAgB7Q,KAAK8C,sBAAsBhB,EAAGC,G,CAOxD+O,gCAAgC5G,EAAY6G,GACxC7G,EAAM8G,iBAAiBD,E,CAO3BE,2BAA2B/G,EAAY6F,GACnC7F,EAAMgH,YAAYnB,E,CAOtBoB,4BAA4BjH,EAAYgB,GACpChB,EAAMkH,aAAalG,E,CAOvBmG,mCAAmCnH,EAAYwG,GAC3CxG,EAAMoH,oBAAoBZ,E,CAO9Ba,sBAAsBjI,GAClB,IAAIkI,EAAOxR,KAAKsF,uBACZ8J,EAAYpP,KAAK8C,sBAAsBwG,EAAI+F,OAAOvN,EAAGwH,EAAI+F,OAAOtN,GAChEuN,EAAOtP,KAAK6B,cAAcyH,EAAIgG,KAAKxN,EAAGwH,EAAIgG,KAAKvN,GASnD,OARAyP,EAAKvC,WAAW3F,EAAIoD,MAAOpD,EAAIqD,MAAOyC,EAAWE,GACjDkC,EAAK5G,YAActB,EAAIsB,YACvB4G,EAAKzG,WAAazB,EAAIyB,WACtByG,EAAKC,cAAgBnI,EAAImI,cACzBD,EAAKnG,YAAc/B,EAAI+B,YACvBmG,EAAKhC,iBAAmBxP,KAAK0C,eAAe4G,EAAIkG,kBAChDgC,EAAK/B,iBAAmBzP,KAAK0C,eAAe4G,EAAImG,kBAChD+B,EAAKxE,iBAAmB1D,EAAI0D,iBACrBhN,KAAKgK,YAAYwH,EAAMxR,KAAKiB,MAAMyQ,iB,CAM7CC,0BACI,OAAO3R,KAAK8D,iB,CAUhB8N,sBAAsBC,EAAYC,EAAeC,EAAgBC,EAAUC,EAAgBC,GACvFJ,EAAQ9R,KAAK0C,eAAeoP,EAAQG,GACpCF,EAAS/R,KAAK0C,eAAeqP,EAASG,GACtC,IAAIC,EAAWN,EAAMO,WACrBD,EAASrQ,EAAI9B,KAAK0C,eAAesP,EAAIlQ,EAAImQ,GACzCE,EAASpQ,EAAI/B,KAAK0C,eAAesP,EAAIjQ,EAAImQ,GACzCL,EAAMQ,SAASP,EAAOC,EAAQI,EAAU,E,CAM5CG,oBACI,OAAOtS,KAAKgE,e,CAUhBuO,oBAAoBV,EAAY/P,EAAWC,EAAWyQ,EAAeC,EAAeR,EAAgBC,GAChG,IAAIQ,EAAMF,EAAIvF,OACd,IAAI0F,EAAc3S,KAAK4S,kBAAkBJ,EAAK1Q,EAAGC,EAAGkQ,EAAQC,GACxDO,EACAZ,EAAMgB,WAAWF,EAAaD,GAAO,GAErCb,EAAMiB,YAAYH,EAAaD,GAAO,E,CAO9CK,qBACI,OAAO/S,KAAKkE,gB,CAQhB8O,uBAAuBnB,EAAYoB,EAAgBC,GAC/CrB,EAAMsB,SAAWnT,KAAK0C,eAAeuQ,EAASC,E,CAQlDE,oBAAoBvB,EAAY/P,EAAWC,EAAWmR,GAClDrB,EAAMwB,IAAIxG,IAAI7M,KAAK0C,eAAeZ,EAAIoR,GAAQlT,KAAK0C,eAAeX,EAAImR,G,CAM1EI,mBACI,OAAOtT,KAAKoE,c,CAShBmP,mBAAmB1B,EAAY/P,EAAWC,EAAWyQ,EAAeP,EAAgBC,GAGhF,IADA,IAAIsB,EAAY,GACPC,EAAY,EAAGC,EAFdlB,EAAIvF,OAE2BwG,EAAIC,EAAGD,GAAK,EACjDD,EAAGG,KAAK3T,KAAK8C,uBAAuBhB,EAAI0Q,EAAIiB,IAAMxB,GAASlQ,EAAIyQ,EAAIiB,EAAI,IAAMxB,IAEjFJ,EAAM+B,YAAYJ,EAAG,GAAIA,EAAG,G,CAMhCK,sBACI,OAAO7T,KAAK8D,iB,CAUhBgQ,sBAAsBjC,EAAY/P,EAAWC,EAAWyQ,EAAeP,EAAgBC,GACnFL,EAAMhF,IAAI7M,KAAK4S,kBAAkBJ,EAAK1Q,EAAGC,EAAGkQ,EAAQC,GAASM,EAAIvF,OAAS,E,CAQ9E8G,iBAAiBC,GACb,IAAI1K,EAAW,IAAItJ,KAAKiB,MAAMgT,aAK9B,OAJA3K,EAAI4K,QAAUF,EAAWE,QACzB5K,EAAI6K,SAAWH,EAAWG,SAC1B7K,EAAI8K,SAAWJ,EAAWI,SAC1B9K,EAAI+K,YAAcL,EAAWK,YACrBL,EAAWnC,OACf,KAAKyC,eAAaC,SAClB,KAAKD,eAAaE,aACdlL,EAAImL,UAAUzU,KAAK8D,mBACnB,MACJ,KAAKwQ,eAAaI,WACdpL,EAAImL,UAAUzU,KAAKgE,iBACnB,MACJ,KAAKsQ,eAAaK,YACdrL,EAAImL,UAAUzU,KAAKkE,kBACnB,MACJ,KAAKoQ,eAAaM,UACdtL,EAAImL,UAAUzU,KAAKoE,gBAM3B,OAHAkF,EAAIpI,MAAQlB,KAAKmB,OACjBmI,EAAIuL,UAAYb,EAAWnC,MAC3BvI,EAAIwL,OAAS9U,KAAK+U,iBAAiBzL,EAAIuI,MAAOmC,EAAWnC,OAClDvI,C,CAOX0L,0BAA0B1L,EAAU2L,GAChC3L,EAAI4L,OAAOD,WAAaA,C,CAO5BE,4BAA4B7L,EAAU8L,GAClC9L,EAAI4L,OAAOE,aAAeA,C,CAO9BC,wBAAwB/L,EAAUgM,GAC9BhM,EAAI4L,OAAOK,SAAWD,C,CAQ1BE,cAAc9L,EAAWsK,GACrB,IAAI5G,EAAO1D,EAAK+L,cAAczB,GAI9B,OAHA5G,EAAKlM,MAAQlB,KAAKmB,OAClBiM,EAAKyE,MAAQ7R,KAAK+U,iBAAiB3H,EAAKsI,WAAY1B,EAAWa,WAC/DzH,EAAK8H,OAAS9H,EAAKuI,gBACZvI,C,CAMXwI,iBAAiBC,EAAc7B,GAC3B6B,EAAQC,WAAW9B,EAAWE,SAC9B2B,EAAQE,YAAY/B,EAAWG,UAC/B0B,EAAQG,UAAUhC,EAAWI,UAC7ByB,EAAQI,eAAejC,EAAWK,Y,CAOtC6B,qBAAqBL,EAAcM,GAC/BN,EAAQjP,SAAWuP,C,CAMvBC,iBAAiBP,GACb,OAAOA,EAAQQ,S,CAQnBC,yBAAyB5M,EAAWmM,GAC5BnM,EAAKxI,QAAUwI,EAAKxI,MAAMyC,WAAW+F,EAAK6M,eAAeV,E,CAOjEW,oBAAoBC,GAChB,IAAInN,EAAW,IAAItJ,KAAKiB,MAAMsI,UAY9B,OAXAD,EAAIoN,SAAS7J,IAAI7M,KAAK0C,eAAe+T,EAAaC,SAAS5U,GAAI9B,KAAK0C,eAAe+T,EAAaC,SAAS3U,IACzGuH,EAAIqN,MAAQF,EAAaE,MACzBrN,EAAIsN,WAAaH,EAAaG,WAC9BtN,EAAIuN,eAAiBJ,EAAaI,eAClCvN,EAAIwN,gBAAkBL,EAAaK,gBACnCxN,EAAIyN,OAASN,EAAaM,OAC1BzN,EAAI0N,cAAgBP,EAAaO,cACjC1N,EAAI2N,aAAeR,EAAaQ,aAChC3N,EAAI4N,cAAgBT,EAAaS,cACjC5N,EAAI6N,eAAiB,IAAInX,KAAKiB,MAAM4B,OAAO7C,KAAK0C,eAAe+T,EAAaU,eAAerV,GAAI9B,KAAK0C,eAAe+T,EAAaU,eAAepV,IAC/IuH,EAAI/C,KAAOvG,KAAKoX,YAAYX,EAAalQ,MAClCvG,KAAKqJ,WAAWC,E,CAO3B+N,uBAAuB3N,EAAW4N,GAC9B,IAAItF,EAAWtI,EAAK6N,cACpBD,EAAGE,SAASxX,KAAK4C,eAAeoP,EAAIlQ,GAAI9B,KAAK4C,eAAeoP,EAAIjQ,G,CAQpE0V,oBAAoB/N,GAChB,OAAOA,EAAKgO,U,CAShBC,wBAAwBjO,EAAW5H,EAAWC,EAAW4U,GACrD,IAAI3E,EAAMtI,EAAK6N,cACfvF,EAAIlQ,EAAI9B,KAAK0C,eAAeZ,GAC5BkQ,EAAIjQ,EAAI/B,KAAK0C,eAAeX,GAC5B2H,EAAKkO,aAAa5F,EAAK2E,E,CAS3BkB,yBAAyBnO,EAAW5H,EAAWC,GAC3C,IAAIqL,EAAO1D,EAAKyD,cAAcnN,KAAK8C,sBAAsBhB,EAAGC,IACxD+V,EAAa,CAAEhW,EAAG,EAAGC,EAAG,GAG5B,OAFA+V,EAAMhW,EAAI9B,KAAK4C,eAAewK,EAAKtL,GACnCgW,EAAM/V,EAAI/B,KAAK4C,eAAewK,EAAKrL,GAC5B+V,C,CAQXC,yBAAyBrO,EAAW5H,EAAWC,GAC3C,IAAIqL,EAAO1D,EAAKsO,cAAchY,KAAK8C,sBAAsBhB,EAAGC,IACxD+V,EAAa,CAAEhW,EAAG,EAAGC,EAAG,GAG5B,OAFA+V,EAAMhW,EAAI9B,KAAK4C,eAAewK,EAAKtL,GACnCgW,EAAM/V,EAAI/B,KAAK4C,eAAewK,EAAKrL,GAC5B+V,C,CAQXG,qBAAqBvO,EAAWwO,EAAYxB,GACxC1W,KAAK4D,UAAU9B,EAAI9B,KAAK0C,eAAegU,EAAS5U,GAChD9B,KAAK4D,UAAU7B,EAAI/B,KAAK0C,eAAegU,EAAS3U,GAChD/B,KAAK6D,UAAU/B,EAAIoW,EAAMpW,EACzB9B,KAAK6D,UAAU9B,EAAImW,EAAMnW,EACzB2H,EAAKyO,WAAWnY,KAAK6D,UAAW7D,KAAK4D,WAAW,E,CAOpDwU,6BAA6B1O,EAAWwO,GACpCxO,EAAK2O,mBAAmBH,E,CAS5BI,6BAA6B5O,EAAW6O,EAAc7B,GAClDhN,EAAK8O,mBAAmBD,EAAS7B,E,CAMrC+B,qCAAqC/O,EAAW6O,GAC5C7O,EAAKgP,2BAA2BH,E,CAQpCI,sBAAsBjP,EAAWkP,GAC7BlP,EAAKmP,YAAYD,E,CAOrBE,uBAAuBpP,EAAWqP,GAC9BrP,EAAKsP,kBAAkBD,E,CAO3BE,oBAAoBvP,EAAWwP,GAC3BxP,EAAKyP,SAASD,E,CAQlBE,mBAAmB1P,GACf,OAAOA,EAAKsG,S,CAQhBqJ,qBAAqB3P,GACjB,IAAI9H,EAAQ8H,EAAK4P,iBACbxB,EAAa,CAAEhW,EAAG,EAAGC,EAAG,GAG5B,OAFA+V,EAAMhW,EAAI9B,KAAK4C,eAAehB,EAAME,GACpCgW,EAAM/V,EAAI/B,KAAK4C,eAAehB,EAAMG,GAC7B+V,C,CAMXyB,sBAAsB7P,GAClB,OAAOA,EAAK8P,S,CAQhBC,0BAA0B/P,GACtB,IAAI9H,EAAQ8H,EAAKgQ,iBACb5B,EAAa,CAAEhW,EAAG,EAAGC,EAAG,GAG5B,OAFA+V,EAAMhW,EAAI9B,KAAK4C,eAAehB,EAAME,GACpCgW,EAAM/V,EAAI/B,KAAK4C,eAAehB,EAAMG,GAC7B+V,C,CAOX6B,mBAAmBjQ,EAAW9H,GAC1B8H,EAAKkQ,QAAQ5Z,KAAKoX,YAAYxV,G,CAOlCiY,2BAA2BnQ,EAAW9H,GAClC8H,EAAKoQ,gBAAgBlY,E,CAOzBmY,4BAA4BrQ,EAAW9H,GACnC8H,EAAKsQ,kBAAkBpY,E,CAO3BqY,yBAAyBvQ,EAAW9H,GAChC8H,EAAKwQ,mBAAmBtY,E,CAO5BuY,6BAA6BzQ,EAAW9H,GACpC8H,EAAK0Q,kBAAkBxY,E,CAO3ByY,8BAA8B3Q,GAC1B,OAAOA,EAAK4Q,oB,CAOhBC,8BAA8B7Q,EAAW9H,GACrC8H,EAAK8Q,mBAAmB5Y,E,CAO5B6Y,4BAA4B/Q,EAAW9H,GACnC8H,EAAKgR,iBAAiB9Y,E,CAO1B+Y,6BAA6BjR,GACzB,OAAOA,EAAKkR,mB,CAOhBC,6BAA6BnR,EAAW9H,GACpC8H,EAAKsP,kBAAkB,IAAIhZ,KAAKiB,MAAM4B,OAAOjB,EAAME,EAAGF,EAAMG,G,CAOhE+Y,qBAAqBpR,EAAW9H,GAC5B8H,EAAKqR,UAAUnZ,E,CAMnBoZ,0BAA0BtR,GACtBA,EAAKuR,e,CAIT7D,YAAY7Q,GACR,MAAY,WAARA,EACOvG,KAAKiB,MAAMia,eACH,UAAR3U,EACAvG,KAAKiB,MAAMka,cACH,aAAR5U,EACAvG,KAAKiB,MAAMma,sBADf,C,CAMXC,gBAAgBC,EAAYC,GAAgB,GACxC,IAKIC,EALAC,EAAYzb,KAAKiB,MAAMya,YAAYJ,EAAOtb,KAAKiB,MAAM0a,SACrDC,GAAmB,IAAdH,EAAUG,GAASC,QAAQ,GAChCC,GAAmB,IAAdL,EAAUK,GAASD,QAAQ,GAChCE,GAAmB,IAAdN,EAAUM,GAASF,QAAQ,GASpC,OALIL,EADAD,EAAQ,EACH,QAAQK,KAAKE,KAAKC,KAAKR,KAGvB,OAAOK,KAAKE,KAAKC,KAEnBP,C,CAIHQ,eAAeC,EAAeC,GAC9B,IAAAzI,EACEwI,EAAShP,OACf,IAAI3F,EAAgB,GACpB,IAAKmM,EAAI,EAAGA,EAAIyI,EAAazI,IAAK,CAC9B,IAAI0I,EAAOnc,KAAKiB,MAAMya,YAAYO,EAAgB,EAAJxI,EAAQzT,KAAKiB,MAAM4B,QACjEyE,EAAOqM,KAAKwI,EAAKC,QAASD,EAAKE,QAClC,CACD,OAAO/U,C,CAIXe,YAAY4T,EAAeC,EAAkBZ,GACzC,IAAIhU,EAAgBtH,KAAKgc,eAAeC,EAAUC,GAClDlc,KAAKqB,WAAWib,GAAGC,SAAS,EAAG,EAAGjV,EAAQ,KAAMtH,KAAKqb,gBAAgBC,EAAO,GAAItb,KAAKqB,WAAWmb,U,CAIpGlU,iBAAiB2T,EAAeC,EAAkBZ,GAC9C,IAAIhU,EAAgBtH,KAAKgc,eAAeC,EAAUC,GAClDlc,KAAKqB,WAAWib,GAAGC,SAAS,EAAG,EAAGjV,EAAQtH,KAAKqb,gBAAgBC,EAAO,IAAMtb,KAAKqb,gBAAgBC,EAAO,GAAItb,KAAKqB,WAAWmb,U,CAIhIjU,WAAWkU,EAAaxJ,EAAaqI,GACjC,IAAIoB,EAAU1c,KAAKiB,MAAMya,YAAYe,EAAQzc,KAAKiB,MAAM4B,QACxD7C,KAAKqB,WAAWib,GAAGK,WAAWD,EAAQ5a,EAAG4a,EAAQ3a,EAAGkR,EAAQ,KAAMjT,KAAKqb,gBAAgBC,EAAO,GAAItb,KAAKqB,WAAWmb,U,CAItHhU,gBAAgBiU,EAAaxJ,EAAa3D,EAAWgM,GACjDmB,EAASzc,KAAKiB,MAAMya,YAAYe,EAAQzc,KAAKiB,MAAM4B,QACnDyM,EAAOtP,KAAKiB,MAAMya,YAAYpM,EAAMtP,KAAKiB,MAAM4B,QAC/C,IAAI+Z,EAAUH,EAAO3a,EACjB+a,EAAUJ,EAAO1a,EACrB/B,KAAKqB,WAAWib,GAAGK,WAAWC,EAAIC,EAAI5J,EAAQjT,KAAKqb,gBAAgBC,EAAO,IAAMtb,KAAKqb,gBAAgBC,EAAO,GAAItb,KAAKqB,WAAWmb,WAChIxc,KAAKqB,WAAWib,GAAGQ,SAASF,EAAIC,EAAKD,EAAKtN,EAAKxN,EAAImR,EAAU4J,EAAKvN,EAAKvN,EAAIkR,EAASjT,KAAKqb,gBAAgBC,EAAO,GAAItb,KAAKqB,WAAWmb,U,CAIxIrU,YAAY+E,EAASG,EAASiO,GAC1BpO,EAAKlN,KAAKiB,MAAMya,YAAYxO,EAAIlN,KAAKiB,MAAM4B,QAC3CwK,EAAKrN,KAAKiB,MAAMya,YAAYrO,EAAIrN,KAAKiB,MAAM4B,QAC3C7C,KAAKqB,WAAWib,GAAGQ,SAAS5P,EAAGpL,EAAGoL,EAAGnL,EAAGsL,EAAGvL,EAAGuL,EAAGtL,EAAG/B,KAAKqb,gBAAgBC,EAAO,GAAItb,KAAKqB,WAAWmb,U,CAIxG/T,cAAcsU,GACVA,EAAK/c,KAAKiB,MAAMya,YAAYqB,EAAI/c,KAAKiB,MAAM+b,aAC3Chd,KAAKqB,WAAW4b,cAAcF,EAAG1V,EAAEvF,EAAGib,EAAG1V,EAAEtF,EAAGgb,EAAGG,EAAExF,YACnD,MAAMzK,EAAS,EAAIxJ,UAAQD,WAC3BxD,KAAKqB,WAAWib,GAAGQ,SAAS,EAAG,EAAG7P,EAAQ,EAAGjN,KAAKqB,WAAW8b,IAAKnd,KAAKqB,WAAWmb,WAClFxc,KAAKqB,WAAWib,GAAGQ,SAAS,EAAG,EAAG,EAAG7P,EAAQjN,KAAKqB,WAAW+b,MAAOpd,KAAKqB,WAAWmb,WACpFxc,KAAKqB,WAAWgc,c,CAIpB3U,UAAUrB,EAAQiW,EAAWhC,GACzBjU,EAAIrH,KAAKiB,MAAMya,YAAYrU,EAAGrH,KAAKiB,MAAM4B,QACzCya,GAAQtd,KAAKqB,WAAWkc,OAAOC,OAC/BF,GAAQtd,KAAKqB,WAAWkc,OAAOE,SAE/B,IAAIC,GADJJ,GAAQ7Z,UAAQD,YACQ,EACxBxD,KAAKqB,WAAWib,GAAGqB,SAAStW,EAAEvF,EAAI4b,EAAOrW,EAAEtF,EAAI2b,EAAOJ,EAAMA,EAAMtd,KAAKqb,gBAAgBC,EAAO,GAAI,K,CAItGsC,WAAW9b,EAAQC,EAAQ8b,GACvB7d,KAAKqB,WAAWyc,MAAMC,SAASF,EAAS/b,EAAGC,EAAG,iBAAkB/B,KAAKqB,WAAW2c,iBAAkB,O,CAItGC,gBAAgBnc,EAAQC,EAAQ8b,GAC5B7d,KAAK4d,WAAW9b,EAAGC,EAAG8b,E,CAI1BlV,SAASuV,EAAUC,EAAU7C,GACzB4C,EAAMle,KAAKiB,MAAMya,YAAYwC,EAAKle,KAAKiB,MAAM4B,QAE7C,IAAI+Z,EAA+B,KADnCuB,EAAMne,KAAKiB,MAAMya,YAAYyC,EAAKne,KAAKiB,MAAM4B,SACvBf,EAAIoc,EAAIpc,GAC1B+a,EAA+B,IAAjBsB,EAAIpc,EAAImc,EAAInc,GAC1Bqc,EAA+B,IAAjBD,EAAIrc,EAAIoc,EAAIpc,GAC1Buc,EAA+B,IAAjBF,EAAIpc,EAAImc,EAAInc,GAC9B,MAAMuc,EAAate,KAAKqb,gBAAgBC,EAAO,GACzCiD,EAAgBve,KAAKqB,WAAWmb,UACtCxc,KAAKqB,WAAWib,GAAGQ,SAASF,EAAKwB,EAAIvB,EAAKwB,EAAIzB,EAAKwB,EAAIvB,EAAKwB,EAAIC,EAAIC,GACpEve,KAAKqB,WAAWib,GAAGQ,SAASF,EAAKwB,EAAIvB,EAAKwB,EAAIzB,EAAKwB,EAAIvB,EAAKwB,EAAIC,EAAIC,GACpEve,KAAKqB,WAAWib,GAAGQ,SAASF,EAAKwB,EAAIvB,EAAKwB,EAAIzB,EAAKwB,EAAIvB,EAAKwB,EAAIC,EAAIC,GACpEve,KAAKqB,WAAWib,GAAGQ,SAASF,EAAKwB,EAAIvB,EAAKwB,EAAIzB,EAAKwB,EAAIvB,EAAKwB,EAAIC,EAAIC,E,CAIxE1Y,qBACI,IAAI5E,EAAQjB,KAAKiB,MAEjB,IAAIud,EAAU,IAAIxe,KAAKiB,MAAMwd,kBAgB7B,OAfAD,EAAQE,aAAe,SAAUlY,GAC7BmY,YAAUC,EAAEC,WAAWlL,KAAK,eAAgB1S,EAAMya,YAAYlV,EAASvF,EAAM6d,WACjF,EAEAN,EAAQO,WAAa,SAAUvY,GAC3BmY,YAAUC,EAAEC,WAAWlL,KAAK,cAAe1S,EAAMya,YAAYlV,EAASvF,EAAM6d,WAChF,EAEAN,EAAQQ,SAAW,SAAUxY,EAAcyY,GACvCN,YAAUC,EAAEC,WAAWlL,KAAK,cAAe1S,EAAMya,YAAYlV,EAASvF,EAAM6d,WAChF,EAEAN,EAAQU,UAAY,SAAU1Y,EAAc+R,GAE5C,EACOiG,C,CAIX7Y,yBACI,IAAI6Y,EAAU,IAAIxe,KAAKiB,MAAMke,sBAC7B,IAAIle,EAAQjB,KAAKiB,MASjB,OARAud,EAAQY,gBAAkB,SAAUlV,IAChCA,EAAQjJ,EAAMya,YAAYxR,EAAOjJ,EAAMoe,UACjC5U,cAAchB,SAAW,CACnC,EACA+U,EAAQc,kBAAoB,SAAUzJ,IAClCA,EAAU5U,EAAMya,YAAY7F,EAAS5U,EAAMse,YACnC9U,cAAchB,SAAW,CACrC,EACO+U,C,CAIXpU,WAAWX,EAAcQ,GACrB,OAAOjK,KAAKiB,MAAMmJ,WAAWX,EAASQ,E,CAI1CuV,kBAAkBlY,GAId,IAHA,IAAIoL,EAAcpL,EAAO2F,OACrBwS,EAASzf,KAAKiB,MAAMye,QAAc,EAANhN,GAC5BiN,EAAS,EACJlM,EAAY,EAAGA,EAAIf,EAAKe,IAC7BzT,KAAKiB,MAAM2e,QAAQH,EAASE,GAAU,GAAK3f,KAAK0C,eAAe4E,EAAOmM,IACtEkM,GAAU,EAEd,OAAO3f,KAAKiB,MAAMya,YAAY+D,EAAQzf,KAAKiB,MAAM4B,O,CAIrD+P,kBAAkBtL,EAAkBxF,EAAWC,EAAWkQ,EAAgBC,GAItE,IAHA,IAAIQ,EAAcpL,EAAO2F,QAAU,EAC/BwS,EAASzf,KAAKiB,MAAMye,QAAc,EAANhN,GAC5BiN,EAAS,EACJlM,EAAI,EAAGA,EAAIf,EAAKe,IACrBzT,KAAKiB,MAAM2e,QAAQH,EAASE,GAAU,GAAK3f,KAAK0C,gBAAgB4E,EAAO,EAAImM,GAAK3R,GAAKmQ,GACrFjS,KAAKiB,MAAM2e,QAAQH,GAAUE,EAAS,IAAM,GAAK3f,KAAK0C,gBAAgB4E,EAAO,EAAImM,EAAI,GAAK1R,GAAKmQ,GAC/FyN,GAAU,EAEd,OAAO3f,KAAKiB,MAAMya,YAAY+D,EAAQzf,KAAKiB,MAAM4B,O,CAIrDM,kBAAkBmG,EAAUuW,EAAwB/T,EAAsBY,EAAYC,GAClF,GAAamT,MAATpT,GAA+BoT,MAATnT,EAGtB,OAFArD,EAAI+C,UAAY,OAChB/C,EAAIiD,QAAU,GAGlB,MAAMwT,EAAQrT,EAAMsD,UACdgQ,EAAQrT,EAAMqD,UACpB,IAAIiQ,EAEAA,EADAF,EAAQ,GAAOC,EAAQ,EAChBD,EAAQC,GAASD,EAAQC,GAE3BD,EAAQ,EACNA,EAGAC,EAEX,MAAME,EAAQ,EAAMC,KAAKC,GAAKP,EAC9BvW,EAAI+C,UAAY4T,EAAOC,EAAQA,EAC/B5W,EAAIiD,QAAU,EAAM0T,EAAOnU,EAAeoU,C,CAO9CjU,mBAAmB3C,EAAUuW,EAAwB/T,EAAsBY,EAAYC,GACnF,MAAM0T,EAAK3T,EAAM4T,aACXC,EAAK5T,EAAM2T,aACjB,IAAI1B,EAEAA,EADAyB,EAAK,GAAOE,EAAK,EACbF,EAAKE,GAAMF,EAAKE,GAEfF,EAAK,EACNA,EAGAE,EAER,MAAML,EAAQ,EAAMC,KAAKC,GAAKP,EAC9BvW,EAAI+C,UAAYuS,EAAIsB,EAAQA,EAC5B5W,EAAIiD,QAAU,EAAMqS,EAAI9S,EAAeoU,C,CAM3C5S,cAAcJ,EAASG,GACnB,OAAO8S,KAAKK,KAAKL,KAAKM,IAAIpT,EAAGvL,EAAIoL,EAAGpL,EAAG,GAAKqe,KAAKM,IAAIpT,EAAGtL,EAAImL,EAAGnL,EAAG,G,CAMtE2e,WAAWtT,GACP,OAAOpN,KAAKiB,MAAM0f,QAAQvT,EAAMpN,KAAKiB,MAAM2f,K,CAM/C7a,QAAQqH,GACJA,EAAKyT,a,CAMT9L,iBAAiBlD,EAAYiP,GACzB,OAAQA,GACJ,KAAKxM,eAAaC,SAClB,KAAKD,eAAaE,aACd,OAAOxU,KAAKoK,WAAWyH,EAAO7R,KAAKiB,MAAM8C,gBAE7C,KAAKuQ,eAAaI,WACd,OAAO1U,KAAKoK,WAAWyH,EAAO7R,KAAKiB,MAAMgD,cAE7C,KAAKqQ,eAAaK,YACd,OAAO3U,KAAKoK,WAAWyH,EAAO7R,KAAKiB,MAAMkD,eAE7C,KAAKmQ,eAAaM,UACd,OAAO5U,KAAKoK,WAAWyH,EAAO7R,KAAKiB,MAAMoD,a,EAMzDsa,YAAUC,EAAEmC,SAAW,IAAIjhB,qB"}