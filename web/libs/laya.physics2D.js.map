{"version":3,"names":["PhysicsShape","FixtureBox2DDef","Physics2DOption","allowSleeping","gravity","x","y","customUpdate","velocityIterations","positionIterations","pixelRatio","debugDraw","drawShape","drawJoint","drawAABB","drawCenterOfMass","Physics2D","EventDispatcher","constructor","this","_eventList","I","_I","enableDebugDraw","enable","_factory","createDebugDraw","drawFlags_shapeBit","removeDebugDraw","flag","appendFlags","clearFlags","drawFlags_jointBit","drawFlags_aabbBit","drawPair","drawFlags_pairBit","drawFlags_centerOfMassBit","initialize","then","start","Promise","resolve","destroyWorld","_enabled","ILaya","physicsTimer","clear","_update","_emptyBody","createBody","_rigiBodyList","SingletonList","_updataattributeLists","LayaEnv","isPlaying","frameLoop","addRigidBody","body","add","removeRigidBody","remove","updataRigidBodyAttribute","removeRigidBodyAttribute","i","n","length","elements","updatePhysicsAttribute","delta","Math","min","timer","update","_updatePhysicsTransformToRender","len","sendEvent","updatePhysicsTransformToRender","stop","value","getBodyCount","bodyCount","getContactCount","contactCount","getJointCount","jointCount","worldRoot","_worldRoot","stage","p","localToGlobal","Point","TEMP","setTo","shiftOrigin","updatePhysicsByWorldRoot","Laya","addInitCallback","RigidBody2DInfo","position","Vector2","linearVelocity","RigidBody","Component","_type","_allowSleep","_angularVelocity","_angularDamping","_linearVelocity","_linearDamping","_bullet","_allowRotation","_gravityScale","group","category","mask","label","_createBody","_body","owner","factory","sp","defRigidBodyDef","setValue","globalPosX","globalPosY","angle","Utils","toRadian","globalRotation","allowSleep","angularDamping","angularVelocity","bullet","fixedRotation","gravityScale","linearDamping","obj","type","rigidBodyDef_Create","_needrefeshShape","_updateBodyType","set_rigidBody_type","_onAwake","cacheGlobal","on","_globalChangeHandler","changeFlag","_onEnable","point","GetWorldPoint","set_RigibBody_Transform","comps","getComponents","ColliderBase","collider","rigidBody","refresh","retSet_rigidBody_MassData","set_rigidbody_Awake","event","get_rigidBody_IsAwake","pos","TempVector2","get_RigidBody_Position","setGlobalPos","toAngle","get_RigidBody_Angle","_onDisable","off","removeBody","_onDestroy","getBody","_getOriBody","applyForce","force","rigidBody_applyForce","applyForceToCenter","rigidBody_applyForceToCenter","applyLinearImpulse","impulse","rigidbody_ApplyLinearImpulse","applyLinearImpulseToCenter","rigidbody_ApplyLinearImpulseToCenter","applyTorque","torque","rigidbody_applyTorque","setVelocity","velocity","set_rigidBody_linearVelocity","setAngle","getMass","get_rigidbody_Mass","getCenter","get_rigidBody_Center","getWorldCenter","get_rigidBody_WorldCenter","set_rigidBody_gravityScale","allowRotation","set_rigidBody_allowRotation","set_rigidBody_allowSleep","set_rigidBody_angularDamping","get_rigidBody_angularVelocity","set_rigidBody_angularVelocity","set_rigidBody_linearDamping","vec","get_rigidBody_linearVelocity","Array","set_rigidBody_bullet","getGlobalMatrix","transformPoint","GetLocalPoint","Sprite","Sprite_GlobalDeltaFlage_Position_X","Sprite_GlobalDeltaFlage_Position_Y","Sprite_GlobalDeltaFlage_Rotation","Sprite_GlobalDeltaFlage_Scale_X","Sprite_GlobalDeltaFlage_Scale_Y","_x","_needupdataShapeAttribute","_y","scaleX","globalScaleX","scaleY","globalScaleY","super","_isSensor","_density","_friction","_restitution","_singleton","_setShapeData","shape","pivotoffx","pivotX","pivotoffy","pivotY","createfixture","def","TempDef","density","friction","isSensor","restitution","_physicShape","fixtureDef","createFixtureDef","_shape","fixture","resetFixtureData","getComponent","enabled","set_fixtureDef_GroupIndex","set_fixtureDef_CategoryBits","set_fixtureDef_maskBits","set_fixture_collider","rigidBody_DestroyFixture","BoxCollider","_width","_height","BoxShape","helfW","helfH","center","set_collider_SetAsBox","abs","width","height","ChainCollider","_points","_datas","_loop","ChainShape","set_ChainShape_data","points","onAdded","push","arr","split","parseInt","datas","loop","CircleCollider","_radius","CircleShape","scale","max","radius","set_CircleShape_radius","set_CircleShape_pos","EdgeCollider","EdgeShape","set_EdgeShape_data","PolygonCollider","PolygonShape","set_PolygonShape_data","JointBase","getBodyAnchor","anchorx","anchory","node","transform","transformPointN","joint","_joint","_createJoint","getJoint_userData","getJoint_userData_destroy","removeJoint","physics2D_DistancJointDef","localAnchorA","localAnchorB","physics2D_GearJointDef","physics2D_MotorJointDef","linearOffset","physics2D_MouseJointJointDef","target","physics2D_PrismaticJointDef","anchor","axis","physics2D_PulleyJointDef","groundAnchorA","groundAnchorB","physics2D_RevoluteJointDef","physics2D_WeldJointDef","physics2D_WheelJointDef","DistanceJoint","selfAnchor","otherAnchor","collideConnected","_length","_maxLength","_minLength","_frequency","_dampingRatio","selfBody","_temp","bodyB","_refeahJoint","otherBody","bodyA","dampingRatio","frequency","maxLength","minLength","createDistanceJoint","set_DistanceJointStiffnessDamping","onDestroy","set_DistanceJoint_length","set_DistanceJoint_MinLength","set_DistanceJoint_MaxLength","damping","jointLength","phyToLayaValue","GetLength","GearJoint","_ratio","joint1","joint2","ratio","create_GearJoint","set_GearJoint_SetRatio","MotorJoint","_linearOffset","_angularOffset","_maxForce","_maxTorque","_correctionFactor","angularOffset","maxForce","maxTorque","correctionFactor","create_MotorJoint","set_MotorJoint_linearOffset","set_MotorJoint_SetAngularOffset","set_MotorJoint_SetMaxForce","set_MotorJoint_SetMaxTorque","set_MotorJoint_SetCorrectionFactor","MouseJoint","mouseEnabled","Event","MOUSE_DOWN","onMouseDown","MOUSE_MOVE","onMouseMove","once","MOUSE_UP","onStageMouseUp","MOUSE_OUT","anchorPos","globalToLocal","mouseX","mouseY","create_MouseJoint","set_MouseJoint_target","set_MouseJoint_frequencyAndDampingRatio","PrismaticJoint","_axis","_enableMotor","_motorSpeed","_maxMotorForce","_enableLimit","_lowerTranslation","_upperTranslation","radian","cos","sin","enableMotor","motorSpeed","maxMotorForce","enableLimit","lowerTranslation","upperTranslation","create_PrismaticJoint","set_Joint_EnableMotor","set_Joint_SetMotorSpeed","set_Joint_SetMaxMotorTorque","set_Joint_EnableLimit","set_Joint_SetLimits","atan2","PulleyJoint","selfGroundPoint","otherGroundPoint","posA","posB","groundA","groundB","create_PulleyJoint","RevoluteJoint","_maxMotorTorque","_lowerAngle","_upperAngle","global","maxMotorTorque","lowerAngle","upperAngle","create_RevoluteJoint","WeldJoint","create_WeldJoint","set_Joint_frequencyAndDampingRatio","WheelJoint","create_WheelJoint","Physics2DDebugDraw","DrawString_color","Red","Green","_camera","m_center","m_extent","m_zoom","m_width","m_height","_mG","Graphics","graphics","_textSp","_textG","addChild","render","ctx","_renderToGraphic","world","save","PIXEL_RATIO","_lineWidth","layaToPhyValue","DebugDraw","DrawDebugData","restore","PushTransform","tx","ty","translate","rotate","PopTransform","mG","textG","lineWidth","camera","c","ClassUtils","regClass"],"sources":["../../src/layaAir/laya/physics/Collider2D/ColliderStructInfo.ts","../../src/layaAir/laya/physics/Physics2DOption.ts","../../src/layaAir/laya/physics/Physics2D.ts","../../src/layaAir/laya/physics/RigidBody2DInfo.ts","../../src/layaAir/laya/physics/RigidBody.ts","../../src/layaAir/laya/physics/Collider2D/ColliderBase.ts","../../src/layaAir/laya/physics/Collider2D/BoxCollider.ts","../../src/layaAir/laya/physics/Collider2D/ChainCollider.ts","../../src/layaAir/laya/physics/Collider2D/CircleCollider.ts","../../src/layaAir/laya/physics/Collider2D/EdgeCollider.ts","../../src/layaAir/laya/physics/Collider2D/PolygonCollider.ts","../../src/layaAir/laya/physics/joint/JointBase.ts","../../src/layaAir/laya/physics/joint/JointDefStructInfo.ts","../../src/layaAir/laya/physics/joint/DistanceJoint.ts","../../src/layaAir/laya/physics/joint/GearJoint.ts","../../src/layaAir/laya/physics/joint/MotorJoint.ts","../../src/layaAir/laya/physics/joint/MouseJoint.ts","../../src/layaAir/laya/physics/joint/PrismaticJoint.ts","../../src/layaAir/laya/physics/joint/PulleyJoint.ts","../../src/layaAir/laya/physics/joint/RevoluteJoint.ts","../../src/layaAir/laya/physics/joint/WeldJoint.ts","../../src/layaAir/laya/physics/joint/WheelJoint.ts","../../src/layaAir/laya/physics/Physics2DDebugDraw.ts","../../src/layaAir/laya/physics/ModuleDef.ts"],"sourcesContent":["export enum PhysicsShape {\r\n    BoxShape,\r\n    CircleShape,\r\n    PolygonShape,\r\n    ChainShape,\r\n    EdgeShape,\r\n}\r\n\r\nexport class FixtureBox2DDef {\r\n    density: number;\r\n    friction: number;\r\n    isSensor: boolean;\r\n    restitution: number;\r\n    shape: PhysicsShape;//Box2D Shape\r\n    groupIndex: number;\r\n}","/**\r\n *  Physics2DOption 用于配置2D物理的默认参数\r\n */\r\nexport class Physics2DOption {\r\n\r\n    /**设置是否允许休眠，休眠可以提高稳定性和性能，但通常会牺牲准确性*/\r\n    static allowSleeping: boolean = false;\r\n\r\n    /**重力 （单位：像素）*/\r\n    static gravity = { x: 0, y: 9.8 };\r\n\r\n    /**是否由外部跟新*/\r\n    static customUpdate: boolean = false;\r\n\r\n    /**旋转迭代次数，增大数字会提高精度，但是会降低性能*/\r\n    static velocityIterations: number = 8;\r\n\r\n    /**位置迭代次数，增大数字会提高精度，但是会降低性能*/\r\n    static positionIterations: number = 3;\r\n\r\n    /**2D游戏默认单位为像素，物理默认单位为米，此值设置了像素和米的转换比率，默认50像素=1米*/\r\n    static pixelRatio: number = 50;\r\n\r\n    /**是否开启物理绘制*/\r\n    static debugDraw: boolean = true;\r\n\r\n    /**是否绘制形状*/\r\n    static drawShape: boolean = true;\r\n\r\n    /**是否绘制关节*/\r\n    static drawJoint: boolean = true;\r\n\r\n    /**是否绘制包围盒*/\r\n    static drawAABB: boolean = false;\r\n\r\n    /**是否绘制质心*/\r\n    static drawCenterOfMass: boolean = false;\r\n}","import { Sprite } from \"../display/Sprite\"\r\nimport { EventDispatcher } from \"../events/EventDispatcher\"\r\nimport { Point } from \"../maths/Point\"\r\nimport { ILaya } from \"../../ILaya\";\r\nimport { LayaEnv } from \"../../LayaEnv\";\r\nimport { Physics2DOption } from \"./Physics2DOption\";\r\nimport { Vector2 } from \"../maths/Vector2\";\r\nimport { IPhysiscs2DFactory } from \"./IPhysiscs2DFactory\";\r\nimport { SingletonList } from \"../utils/SingletonList\";\r\nimport { RigidBody } from \"./RigidBody\";\r\nimport { Laya } from \"../../Laya\";\r\n\r\n/**\r\n * 2D物理引擎\r\n */\r\nexport class Physics2D extends EventDispatcher {\r\n\r\n    /**@private */\r\n    private static _I: Physics2D;\r\n\r\n    /**@private 是否已经激活*/\r\n    private _enabled: boolean;\r\n\r\n    /**@private 根容器*/\r\n    private _worldRoot: Sprite;\r\n\r\n    /**@private 空的body节点，给一些不需要节点的关节使用*/\r\n    _emptyBody: any;\r\n    /**@private */\r\n    _eventList: any[] = [];\r\n\r\n    _factory: IPhysiscs2DFactory;\r\n\r\n    /**@private 需要同步实时跟新数据列表*/\r\n    _rigiBodyList: SingletonList<RigidBody>;\r\n    /**@private 需要同步物理数据的列表；使用后会及时释放*/\r\n    _updataattributeLists: SingletonList<RigidBody>;\r\n\r\n    /**全局物理单例*/\r\n    static get I(): Physics2D {\r\n        return Physics2D._I || (Physics2D._I = new Physics2D());\r\n    }\r\n\r\n    /**\r\n     * 设置物理绘制\r\n     */\r\n    set enableDebugDraw(enable: boolean) {\r\n        if (enable) {\r\n            this._factory.createDebugDraw(this._factory.drawFlags_shapeBit);\r\n        } else {\r\n            this._factory.removeDebugDraw();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 是否绘制Shape\r\n     */\r\n    set drawShape(enable: boolean) {\r\n        let flag = this._factory.drawFlags_shapeBit;\r\n        if (enable) {\r\n            this._factory.appendFlags(flag);\r\n        } else {\r\n            this._factory.clearFlags(flag);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 是否绘制Joint\r\n     */\r\n    set drawJoint(enable: boolean) {\r\n        let flag = this._factory.drawFlags_jointBit;\r\n        if (enable) {\r\n            this._factory.appendFlags(flag);\r\n        } else {\r\n            this._factory.clearFlags(flag);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 是否绘制AABB\r\n     */\r\n    set drawAABB(enable: boolean) {\r\n        let flag = this._factory.drawFlags_aabbBit;\r\n        if (enable) {\r\n            this._factory.appendFlags(flag);\r\n        } else {\r\n            this._factory.clearFlags(flag);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * 是否绘制Pair\r\n    */\r\n    set drawPair(enable: boolean) {\r\n        let flag = this._factory.drawFlags_pairBit;\r\n        if (enable) {\r\n            this._factory.appendFlags(flag);\r\n        } else {\r\n            this._factory.clearFlags(flag);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * 是否绘制CenterOfMass\r\n    */\r\n    set drawCenterOfMass(enable: boolean) {\r\n        let flag = this._factory.drawFlags_centerOfMassBit;\r\n        if (enable) {\r\n            this._factory.appendFlags(flag);\r\n        } else {\r\n            this._factory.clearFlags(flag);\r\n        }\r\n    }\r\n\r\n    enable(): Promise<void> {\r\n        if (this._factory) {\r\n            return this._factory.initialize().then(() => {\r\n                this.start();\r\n                return Promise.resolve();\r\n            });\r\n        }\r\n        else\r\n            return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n    * 销毁当前物理世界\r\n    */\r\n    destroyWorld() {\r\n        this._enabled = false;\r\n        this._factory.destroyWorld();\r\n        ILaya.physicsTimer.clear(this, this._update);\r\n    }\r\n\r\n    /**\r\n     * 开启物理世界\r\n     */\r\n    start(): void {\r\n        if (!this._enabled) {\r\n            this._enabled = true;\r\n            this._factory.start();\r\n            this.allowSleeping = Physics2DOption.allowSleeping;\r\n            this._emptyBody = this._factory.createBody(null);\r\n        } else {\r\n            ILaya.physicsTimer.clear(this, this._update);\r\n        }\r\n\r\n        if (Physics2DOption.debugDraw) {\r\n            this.enableDebugDraw = true;\r\n            this.drawShape = Physics2DOption.drawShape;\r\n            this.drawJoint = Physics2DOption.drawJoint;\r\n            this.drawAABB = Physics2DOption.drawAABB;\r\n            this.drawCenterOfMass = Physics2DOption.drawCenterOfMass;\r\n        } else {\r\n            this.enableDebugDraw = false;\r\n        }\r\n        if (!this._rigiBodyList) this._rigiBodyList = new SingletonList<RigidBody>();\r\n        else this._rigiBodyList.clear();\r\n\r\n        if (!this._updataattributeLists) this._updataattributeLists = new SingletonList<RigidBody>();\r\n        else this._updataattributeLists.clear();\r\n\r\n        if (!Physics2DOption.customUpdate && LayaEnv.isPlaying)\r\n            ILaya.physicsTimer.frameLoop(1, this, this._update);\r\n    }\r\n\r\n    /**@internal */\r\n    addRigidBody(body: RigidBody) {\r\n        this._rigiBodyList.add(body);\r\n    }\r\n\r\n    /**@internal */\r\n    removeRigidBody(body: RigidBody) {\r\n        this._rigiBodyList.remove(body);\r\n    }\r\n\r\n    /**@internal */\r\n    updataRigidBodyAttribute(body: RigidBody) {\r\n        this._updataattributeLists.add(body);\r\n    }\r\n\r\n    /**@internal */\r\n    removeRigidBodyAttribute(body: RigidBody) {\r\n        this._updataattributeLists.remove(body);\r\n    }\r\n\r\n    /**@private*/\r\n    private _update(): void {\r\n        //同步渲染世界参数到物理世界\r\n        for (var i = 0, n = this._updataattributeLists.length; i < n; i++) {\r\n            this._updataattributeLists.elements[i].updatePhysicsAttribute()\r\n        }\r\n        this._updataattributeLists.clear();\r\n        //时间步太长，会导致错误穿透\r\n        var delta = Math.min(ILaya.timer.delta / 1000, 0.033);\r\n        this._factory.update(delta);\r\n        //同步物理坐标到渲染坐标\r\n        this._updatePhysicsTransformToRender();\r\n        //同步事件\r\n        var len: number = this._eventList.length;\r\n        if (len > 0) {\r\n            for (var i: number = 0; i < len; i += 2) {\r\n                this._factory.sendEvent(this._eventList[i], this._eventList[i + 1]);\r\n            }\r\n            this._eventList.length = 0;\r\n        }\r\n    }\r\n\r\n    /**@private*/\r\n    _updatePhysicsTransformToRender() {\r\n        for (var i = 0, n = this._rigiBodyList.length; i < n; i++) {\r\n            this._rigiBodyList.elements[i].updatePhysicsTransformToRender()\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 停止物理世界\r\n     */\r\n    stop(): void {\r\n        this._rigiBodyList.clear();\r\n        this._updataattributeLists.clear();\r\n        ILaya.physicsTimer.clear(this, this._update);\r\n    }\r\n\r\n    /**\r\n     * 设置是否允许休眠，休眠可以提高稳定性和性能，但通常会牺牲准确性\r\n     */\r\n    get allowSleeping(): boolean {\r\n        return this._factory.allowSleeping;\r\n    }\r\n\r\n    set allowSleeping(value: boolean) {\r\n        this._factory.allowSleeping = value;\r\n    }\r\n\r\n    /**\r\n    * 物理世界重力环境，默认值为{x:0,y:10}\r\n    * 如果修改y方向重力方向向上，可以直接设置gravity.y=-10;\r\n    */\r\n    get gravity(): any {\r\n        return this._factory.gravity;\r\n    }\r\n\r\n    set gravity(value: Vector2) {\r\n        this._factory.gravity = value;\r\n    }\r\n\r\n    /**获得刚体总数量*/\r\n    getBodyCount(): number {\r\n        return this._factory.bodyCount;\r\n    }\r\n\r\n    /**获得碰撞总数量*/\r\n    getContactCount(): number {\r\n        return this._factory.contactCount;\r\n    }\r\n\r\n    /**获得关节总数量*/\r\n    getJointCount(): number {\r\n        return this._factory.jointCount;\r\n    }\r\n\r\n    /**物理世界根容器，将根据此容器作为物理世界坐标世界，进行坐标变换，默认值为stage\r\n     * 设置特定容器后，就可整体位移物理对象，保持物理世界不变。\r\n     * 注意，仅会在 set worldRoot 时平移一次，其他情况请配合 updatePhysicsByWorldRoot 函数使用*/\r\n    get worldRoot(): Sprite {\r\n        return this._worldRoot || ILaya.stage;\r\n    }\r\n\r\n    set worldRoot(value: Sprite) {\r\n        this._worldRoot = value;\r\n        if (value) {\r\n            //TODO：\r\n            var p: Point = value.localToGlobal(Point.TEMP.setTo(0, 0));\r\n            this._factory.shiftOrigin(-p.x, -p.y);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设定 worldRoot 后，手动触发物理世界更新\r\n     */\r\n    updatePhysicsByWorldRoot() {\r\n        if (!!this.worldRoot) {\r\n            var p: Point = this.worldRoot.localToGlobal(Point.TEMP.setTo(0, 0));\r\n            this._factory.shiftOrigin(-p.x, -p.y);\r\n        }\r\n    }\r\n}\r\n\r\nLaya.addInitCallback(() => Physics2D.I.enable());","import { Vector2 } from \"../maths/Vector2\";\r\n\r\nexport class RigidBody2DInfo {\r\n    position: Vector2 = new Vector2()\r\n    angle: number;\r\n    allowSleep: boolean\r\n    angularDamping: number;\r\n    angularVelocity: number;\r\n    bullet: boolean;\r\n    fixedRotation: boolean;\r\n    gravityScale: number;\r\n    linearDamping: number;\r\n    linearVelocity: Vector2 = new Vector2();\r\n    type: string;\r\n    group: number;\r\n}","import { ColliderBase } from \"./Collider2D/ColliderBase\";\r\nimport { Component } from \"../components/Component\"\r\nimport { Sprite } from \"..//display/Sprite\"\r\nimport { Point } from \"../maths/Point\"\r\nimport { Utils } from \"../utils/Utils\"\r\nimport { Physics2D } from \"./Physics2D\";\r\nimport { RigidBody2DInfo } from \"./RigidBody2DInfo\";\r\nimport { IV2, Vector2 } from \"../maths/Vector2\";\r\n\r\n/**\r\n * 2D刚体，显示对象通过RigidBody和物理世界进行绑定，保持物理和显示对象之间的位置同步\r\n * 物理世界的位置变化会自动同步到显示对象，显示对象本身的位移，旋转（父对象位移无效）也会自动同步到物理世界\r\n * 如果想整体位移物理世界，可以Physics2D.I.worldRoot=场景，然后移动场景即可\r\n * 可以通过IDE-\"项目设置\"-\"2D物理\"-\"是否开启2D物理绘制\" 开启物理辅助线显示，或者通过代码Physics2D.I.enableDebugDraw=true;\r\n */\r\nexport class RigidBody extends Component {\r\n\r\n    /** 用于判断节点属性更改时更新物理属性*/\r\n    private static changeFlag: number = Sprite.Sprite_GlobalDeltaFlage_Position_X | Sprite.Sprite_GlobalDeltaFlage_Position_Y | Sprite.Sprite_GlobalDeltaFlage_Rotation | Sprite.Sprite_GlobalDeltaFlage_Scale_X | Sprite.Sprite_GlobalDeltaFlage_Scale_Y\r\n    /**\r\n     * 刚体类型，支持三种类型static，dynamic和kinematic类型，默认为dynamic类型\r\n     * static为静态类型，静止不动，不受重力影响，质量无限大，可以通过节点移动，旋转，缩放进行控制\r\n     * dynamic为动态类型，受重力影响\r\n     * kinematic为运动类型，不受重力影响，可以通过施加速度或者力的方式使其运动\r\n     */\r\n    protected _type: string = \"dynamic\";\r\n    /**是否允许休眠，允许休眠能提高性能*/\r\n    protected _allowSleep: boolean = true;\r\n    /**角速度，设置会导致旋转*/\r\n    protected _angularVelocity: number = 0;\r\n    /**旋转速度阻尼系数，范围可以在0到无穷大之间，0表示没有阻尼，无穷大表示满阻尼，通常阻尼的值应该在0到0.1之间*/\r\n    protected _angularDamping: number = 0;\r\n    /**线性运动速度，比如{x:10,y:10}*/\r\n    protected _linearVelocity: any = { x: 0, y: 0 };\r\n    /**线性速度阻尼系数，范围可以在0到无穷大之间，0表示没有阻尼，无穷大表示满阻尼，通常阻尼的值应该在0到0.1之间*/\r\n    protected _linearDamping: number = 0;\r\n    /**是否高速移动的物体，设置为true，可以防止高速穿透*/\r\n    protected _bullet: boolean = false;\r\n    /**是否允许旋转，如果不希望刚体旋转，这设置为false*/\r\n    protected _allowRotation: boolean = true;\r\n    /**重力缩放系数，设置为0为没有重力*/\r\n    protected _gravityScale: number = 1;\r\n\r\n    /**[只读] 指定了该主体所属的碰撞组，默认为0，碰撞规则如下：\r\n     * 1.如果两个对象group相等\r\n     * \t\tgroup值大于零，它们将始终发生碰撞\r\n     * \t\tgroup值小于零，它们将永远不会发生碰撞\r\n     * \t\tgroup值等于0，则使用规则3\r\n     * 2.如果group值不相等，则使用规则3\r\n     * 3.每个刚体都有一个category类别，此属性接收位字段，范围为[1,2^31]范围内的2的幂\r\n     * 每个刚体也都有一个mask类别，指定与其碰撞的类别值之和（值是所有category按位AND的值）\r\n     */\r\n    group: number = 0;\r\n    /**[只读]碰撞类别，使用2的幂次方值指定，有32种不同的碰撞类别可用*/\r\n    category: number = 1;\r\n    /**[只读]指定冲突位掩码碰撞的类别，category位操作的结果*/\r\n    mask: number = -1;\r\n    /**[只读]自定义标签*/\r\n    label: string = \"RigidBody\";\r\n    /**[只读]原始刚体*/\r\n    protected _body: any;\r\n\r\n    /**\r\n     * @private \r\n     */\r\n    private _createBody(): void {\r\n        if (this._body || !this.owner) return;\r\n        let factory = Physics2D.I._factory;\r\n        var sp: Sprite = (<Sprite>this.owner);\r\n        var defRigidBodyDef = new RigidBody2DInfo();\r\n        defRigidBodyDef.position.setValue(sp.globalPosX, sp.globalPosY);\r\n        defRigidBodyDef.angle = Utils.toRadian(sp.globalRotation);\r\n        defRigidBodyDef.allowSleep = this._allowSleep;\r\n        defRigidBodyDef.angularDamping = this._angularDamping;\r\n        defRigidBodyDef.angularVelocity = this._angularVelocity;\r\n        defRigidBodyDef.bullet = this._bullet;\r\n        defRigidBodyDef.fixedRotation = !this._allowRotation;\r\n        defRigidBodyDef.gravityScale = this._gravityScale;\r\n        defRigidBodyDef.linearDamping = this._linearDamping;\r\n        defRigidBodyDef.group = this.group;\r\n        var obj: any = this._linearVelocity;\r\n        if (obj && obj.x != 0 || obj.y != 0) {\r\n            defRigidBodyDef.linearVelocity.setValue(obj.x, obj.y);\r\n        }\r\n        defRigidBodyDef.type = this._type;\r\n\r\n        this._body = factory.rigidBodyDef_Create(defRigidBodyDef);\r\n        this._needrefeshShape();\r\n        this._updateBodyType()\r\n    }\r\n\r\n    /**\r\n     * @private \r\n     * 同步Body 类型\r\n     */\r\n    private _updateBodyType() {\r\n        if (!this._body) return;\r\n        Physics2D.I._factory.set_rigidBody_type(this.body, this._type)\r\n        if (this.type == \"static\") {\r\n            Physics2D.I.removeRigidBody(this)\r\n        } else {\r\n            Physics2D.I.addRigidBody(this)\r\n        }\r\n    }\r\n\r\n    /** @override */\r\n    protected _onAwake(): void {\r\n        (<Sprite>this.owner).cacheGlobal = true;\r\n        this._createBody();\r\n        this.owner.on(\"GlobaChange\", this, this._globalChangeHandler)\r\n    }\r\n\r\n    /** @private */\r\n    private _globalChangeHandler(flag: number) {\r\n        if (flag & RigidBody.changeFlag) this._needrefeshShape()\r\n    }\r\n\r\n    /** @override */\r\n    protected _onEnable(): void {\r\n        this._createBody();\r\n        this.owner.on(\"GlobaChange\", this, this._globalChangeHandler)\r\n    }\r\n\r\n    /** @internal 通知需要跟新对象属性；下一帧执行*/\r\n    _needrefeshShape() {\r\n        Physics2D.I.updataRigidBodyAttribute(this);\r\n    }\r\n\r\n    /**\r\n     * @internal \r\n     * 同步节点坐标及旋转到物理世界,由系统调用\r\n     */\r\n    updatePhysicsAttribute(): void {\r\n        var factory = Physics2D.I._factory;\r\n        let point = this.GetWorldPoint(0, 0);\r\n        factory.set_RigibBody_Transform(this._body, point.x, point.y, Utils.toRadian((<Sprite>this.owner).globalRotation));\r\n        var comps: any[] = this.owner.getComponents(ColliderBase);\r\n        if (comps) {\r\n            for (var i: number = 0, n: number = comps.length; i < n; i++) {\r\n                var collider: ColliderBase = comps[i];\r\n                collider.rigidBody = this;\r\n                collider.refresh();\r\n            }\r\n            factory.retSet_rigidBody_MassData(this._body);\r\n            factory.set_rigidbody_Awake(this._body, true);\r\n            this.owner.event(\"shapeChange\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal \r\n     * 同步物理坐标到游戏坐标,由系统调用\r\n     */\r\n    updatePhysicsTransformToRender(): void {\r\n        if (this.type == \"static\") {\r\n            return;\r\n        }\r\n        var factory = Physics2D.I._factory;\r\n        if (Physics2D.I._factory.get_rigidBody_IsAwake(this._body)) {\r\n            var pos = Vector2.TempVector2;\r\n            factory.get_RigidBody_Position(this.body, pos);\r\n            var sp: Sprite = (<Sprite>this.owner);\r\n            sp.setGlobalPos(pos.x, pos.y);\r\n            sp.globalRotation = Utils.toAngle(factory.get_RigidBody_Angle(this.body));\r\n        }\r\n    }\r\n\r\n    /** @override */\r\n    protected _onDisable(): void {\r\n        Physics2D.I.removeRigidBody(this);\r\n        Physics2D.I.removeRigidBodyAttribute(this);\r\n        this.owner.off(\"GlobaChange\", this, this._globalChangeHandler)\r\n        //添加到物理世界\r\n        this._body && Physics2D.I._factory.removeBody(this._body);\r\n        this._body = null;\r\n    }\r\n\r\n    /** @override */\r\n    protected _onDestroy(): void {\r\n        Physics2D.I.removeRigidBody(this);\r\n        Physics2D.I.removeRigidBodyAttribute(this);\r\n        this.owner.off(\"GlobaChange\", this, this._globalChangeHandler)\r\n        //添加到物理世界\r\n        this._body && Physics2D.I._factory.removeBody(this._body);\r\n        this._body = null;\r\n    }\r\n\r\n    /**获得原始body对象 */\r\n    getBody(): any {\r\n        if (!this._body) this._onAwake();\r\n        return this._body;\r\n    }\r\n\r\n    _getOriBody(): any {\r\n        return this._body;\r\n    }\r\n\r\n    /**[只读]获得原始body对象 */\r\n    get body(): any {\r\n        if (!this._body) this._onAwake();\r\n        return this._body;\r\n    }\r\n\r\n    /**\r\n     * 对刚体施加力\r\n     * @param\tposition 施加力的点，如{x:100,y:100}，全局坐标\r\n     * @param\tforce\t施加的力，如{x:0.1,y:0.1}\r\n     */\r\n    applyForce(position: IV2, force: IV2): void {\r\n        if (!this._body) this._onAwake();\r\n        Physics2D.I._factory.rigidBody_applyForce(this._body, force, position);\r\n    }\r\n\r\n    /**\r\n     * 从中心点对刚体施加力，防止对象旋转\r\n     * @param\tforce\t施加的力，如{x:0.1,y:0.1}\r\n     */\r\n    applyForceToCenter(force: IV2): void {\r\n        if (!this._body) this._onAwake();\r\n        Physics2D.I._factory.rigidBody_applyForceToCenter(this._body, force);\r\n    }\r\n\r\n    /**\r\n     * 施加速度冲量，添加的速度冲量会与刚体原有的速度叠加，产生新的速度\r\n     * @param\tposition 施加力的点，如{x:100,y:100}，全局坐标\r\n     * @param\timpulse\t施加的速度冲量，如{x:0.1,y:0.1}\r\n     */\r\n    applyLinearImpulse(position: IV2, impulse: IV2): void {\r\n        if (!this._body) this._onAwake();\r\n        Physics2D.I._factory.rigidbody_ApplyLinearImpulse(this._body, impulse, position);\r\n    }\r\n\r\n    /**\r\n     * 施加速度冲量，添加的速度冲量会与刚体原有的速度叠加，产生新的速度\r\n     * @param\timpulse\t施加的速度冲量，如{x:0.1,y:0.1}\r\n     */\r\n    applyLinearImpulseToCenter(impulse: IV2): void {\r\n        if (!this._body) this._onAwake();\r\n        Physics2D.I._factory.rigidbody_ApplyLinearImpulseToCenter(this._body, impulse);\r\n    }\r\n\r\n    /**\r\n     * 对刚体施加扭矩，使其旋转\r\n     * @param\ttorque\t施加的扭矩\r\n     */\r\n    applyTorque(torque: number): void {\r\n        if (!this._body) this._onAwake();\r\n        Physics2D.I._factory.rigidbody_applyTorque(this._body, torque);\r\n    }\r\n\r\n    /**\r\n     * 设置速度，比如{x:10,y:10}\r\n     * @param\tvelocity\r\n     */\r\n    setVelocity(velocity: IV2): void {\r\n        if (!this._body) this._onAwake();\r\n        Physics2D.I._factory.set_rigidBody_linearVelocity(this._body, velocity);\r\n    }\r\n\r\n    /**\r\n     * 设置角度\r\n     * @param\tvalue 单位为角度\r\n     */\r\n    setAngle(value: any): void {\r\n        if (!this._body) this._onAwake();\r\n        var factory = Physics2D.I._factory;\r\n        const p = this.GetWorldPoint(0, 0);\r\n        factory.set_RigibBody_Transform(this._body, p.x, p.y, value);\r\n        factory.set_rigidbody_Awake(this._body, true);\r\n    }\r\n\r\n    /**获得刚体质量*/\r\n    getMass(): number {\r\n        return this._body ? Physics2D.I._factory.get_rigidbody_Mass(this._body) : 0;\r\n    }\r\n\r\n    /**\r\n     * 获得质心的相对节点0,0点的位置偏移\r\n     */\r\n    getCenter(): any {\r\n        if (!this._body) this._onAwake();\r\n        var p: IV2 = Physics2D.I._factory.get_rigidBody_Center(this._body);\r\n        return p;\r\n    }\r\n\r\n    /**\r\n     * 获得质心的世界坐标，相对于Physics2D.I.worldRoot节点\r\n     */\r\n    getWorldCenter(): any {\r\n        if (!this._body) this._onAwake();\r\n        var p: IV2 = Physics2D.I._factory.get_rigidBody_WorldCenter(this._body);\r\n        return p;\r\n    }\r\n\r\n    /**\r\n     * 刚体类型，支持三种类型static，dynamic和kinematic类型\r\n     * static为静态类型，静止不动，不受重力影响，质量无限大，可以通过节点移动，旋转，缩放进行控制\r\n     * dynamic为动态类型，接受重力影响\r\n     * kinematic为运动类型，不受重力影响，可以通过施加速度或者力的方式使其运动\r\n     */\r\n    get type(): string {\r\n        return this._type;\r\n    }\r\n\r\n    set type(value: string) {\r\n        this._type = value;\r\n        this._updateBodyType()\r\n    }\r\n\r\n    /**重力缩放系数，设置为0为没有重力*/\r\n    get gravityScale(): number {\r\n        return this._gravityScale;\r\n    }\r\n\r\n    set gravityScale(value: number) {\r\n        this._gravityScale = value;\r\n        if (this._body) Physics2D.I._factory.set_rigidBody_gravityScale(this._body, value);\r\n    }\r\n\r\n    /**是否允许旋转，如果不希望刚体旋转，这设置为false*/\r\n    get allowRotation(): boolean {\r\n        return this._allowRotation;\r\n    }\r\n\r\n    set allowRotation(value: boolean) {\r\n        this._allowRotation = value;\r\n        if (this._body) Physics2D.I._factory.set_rigidBody_allowRotation(this._body, !value);\r\n    }\r\n\r\n    /**是否允许休眠，允许休眠能提高性能*/\r\n    get allowSleep(): boolean {\r\n        return this._allowSleep;\r\n    }\r\n\r\n    set allowSleep(value: boolean) {\r\n        this._allowSleep = value;\r\n        if (this._body) Physics2D.I._factory.set_rigidBody_allowSleep(this._body, value);\r\n    }\r\n\r\n    /**旋转速度阻尼系数，范围可以在0到无穷大之间，0表示没有阻尼，无穷大表示满阻尼，通常阻尼的值应该在0到0.1之间*/\r\n    get angularDamping(): number {\r\n        return this._angularDamping;\r\n    }\r\n\r\n    set angularDamping(value: number) {\r\n        this._angularDamping = value;\r\n        if (this._body) Physics2D.I._factory.set_rigidBody_angularDamping(this._body, value);\r\n    }\r\n\r\n    /**角速度，设置会导致旋转*/\r\n    get angularVelocity(): number {\r\n        if (this._body) return Physics2D.I._factory.get_rigidBody_angularVelocity(this._body);\r\n        return this._angularVelocity;\r\n    }\r\n\r\n    set angularVelocity(value: number) {\r\n        this._angularVelocity = value;\r\n        if (this._body) Physics2D.I._factory.set_rigidBody_angularVelocity(this.body, value);\r\n    }\r\n\r\n    /**线性速度阻尼系数，范围可以在0到无穷大之间，0表示没有阻尼，无穷大表示满阻尼，通常阻尼的值应该在0到0.1之间*/\r\n    get linearDamping(): number {\r\n        return this._linearDamping;\r\n    }\r\n\r\n    set linearDamping(value: number) {\r\n        this._linearDamping = value;\r\n        if (this._body) Physics2D.I._factory.set_rigidBody_linearDamping(this._body, value);\r\n    }\r\n\r\n    /**线性运动速度，比如{x:5,y:5}*/\r\n    get linearVelocity(): IV2 {\r\n        if (this._body) {\r\n            var vec: IV2 = Physics2D.I._factory.get_rigidBody_linearVelocity(this._body);\r\n            return { x: vec.x, y: vec.y };\r\n        }\r\n        return this._linearVelocity;\r\n    }\r\n\r\n    set linearVelocity(value: any) {\r\n        if (!value) return;\r\n        if (value instanceof Array) {\r\n            value = { x: value[0], y: value[1] };\r\n        }\r\n        this._linearVelocity = value;\r\n        if (this._body) Physics2D.I._factory.set_rigidBody_linearVelocity(this._body, value);\r\n    }\r\n\r\n    /**是否高速移动的物体，设置为true，可以防止高速穿透*/\r\n    get bullet(): boolean {\r\n        return this._bullet;\r\n    }\r\n\r\n    set bullet(value: boolean) {\r\n        this._bullet = value;\r\n        if (this._body) Physics2D.I._factory.set_rigidBody_bullet(this._body, value);\r\n    }\r\n\r\n    /** \r\n     * 获得相对body的世界坐标\r\n     * @param x (单位： 像素)\r\n     * @param y (单位： 像素)\r\n    */\r\n    GetWorldPoint(x: number, y: number) {\r\n        return (<Sprite>this.owner).getGlobalMatrix().transformPoint(Point.TEMP.setTo(x, y))\r\n    }\r\n\r\n    /** \r\n     * 获得相对body的本地坐标\r\n     * @param x (单位： 像素)\r\n     * @param y (单位： 像素)\r\n    */\r\n    GetLocalPoint(x: number, y: number) {\r\n        return (<Sprite>this.owner).getGlobalMatrix().transformPoint(Point.TEMP.setTo(x, y))\r\n    }\r\n\r\n}","import { Component } from \"../../components/Component\";\r\nimport { FixtureBox2DDef, PhysicsShape } from \"./ColliderStructInfo\";\r\nimport { Physics2D } from \"../Physics2D\";\r\nimport { RigidBody } from \"../RigidBody\";\r\nimport { Sprite } from \"../../display/Sprite\";\r\n\r\n\r\n/**\r\n * 碰撞体基类\r\n */\r\nexport class ColliderBase extends Component {\r\n\r\n    /**FixtureBox2DDef 数据 */\r\n    private static TempDef: FixtureBox2DDef = new FixtureBox2DDef()\r\n    /**是否是传感器，传感器能够触发碰撞事件，但不会产生碰撞反应*/\r\n    private _isSensor: boolean = false;\r\n    /**密度值，值可以为零或者是正数，建议使用相似的密度，这样做可以改善堆叠稳定性，默认值为10*/\r\n    private _density: number = 10;\r\n    /**摩擦力，取值范围0-1，值越大，摩擦越大，默认值为0.2*/\r\n    private _friction: number = 0.2;\r\n    /**弹性系数，取值范围0-1，值越大，弹性越大，默认值为0*/\r\n    private _restitution: number = 0;\r\n    /**标签*/\r\n    label: string;\r\n    /**@private box2D fixture Def */\r\n    protected _fixtureDef: any;\r\n    /**@readonly[只读]b2Fixture对象 */\r\n    fixture: any;\r\n    /**刚体引用*/\r\n    rigidBody: RigidBody;\r\n    /**@internal shape类型标记*/\r\n    protected _physicShape: PhysicsShape;\r\n\r\n    /**相对节点的x轴偏移*/\r\n    private _x: number = 0;\r\n    /**相对节点的y轴偏移*/\r\n    private _y: number = 0;\r\n\r\n    /**相对节点的x轴偏移*/\r\n    get x(): number {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: number) {\r\n        if (this._x == value) return;\r\n        this._x = value;\r\n        this._needupdataShapeAttribute();\r\n    }\r\n\r\n    /**相对节点的y轴偏移*/\r\n    get y(): number {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: number) {\r\n        if (this._y == value) return;\r\n        this._y = value;\r\n        this._needupdataShapeAttribute();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 获得节点的全局缩放X\r\n     */\r\n    protected get scaleX(): number {\r\n        return (<Sprite>this.owner).globalScaleX;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 获得节点的全局缩放Y\r\n     */\r\n    protected get scaleY(): number {\r\n        return (<Sprite>this.owner).globalScaleY;\r\n    }\r\n\r\n\r\n    /**\r\n     * 创建一个新的 <code>ColliderBase</code> 实例。\r\n     */\r\n    constructor() {\r\n        super();\r\n        this._singleton = false;\r\n    }\r\n\r\n    /**@internal 设置shape数据 */\r\n    protected _setShapeData(shape: any): void {\r\n        throw (\"ColliderBase: must override it.\");\r\n    }\r\n\r\n    /**@internal 创建获得相对于描点x的偏移 */\r\n    protected get pivotoffx(): number {\r\n        return this._x - (<Sprite>this.owner).pivotX;\r\n    }\r\n\r\n    /**@internal 创建获得相对于描点y的偏移 */\r\n    protected get pivotoffy(): number {\r\n        return this._y - (<Sprite>this.owner).pivotY;\r\n    }\r\n\r\n    /**@private 创建Shape*/\r\n    protected createfixture(): any {\r\n        let factory = Physics2D.I._factory;\r\n        var body: any = this.rigidBody.body;\r\n        var def: any = ColliderBase.TempDef;\r\n        def.density = this.density;\r\n        def.friction = this.friction;\r\n        def.isSensor = this.isSensor;\r\n        def.restitution = this.restitution;\r\n        def.shape = this._physicShape;\r\n        let fixtureDef = factory.createFixtureDef(def);\r\n        this._setShapeData(fixtureDef._shape);\r\n        this.fixture = factory.createfixture(body, fixtureDef);\r\n    }\r\n\r\n    /**@private 设置shape属性*/\r\n    protected resetFixtureData() {\r\n        var def: any = ColliderBase.TempDef;\r\n        def.density = this.density;\r\n        def.friction = this.friction;\r\n        def.isSensor = this.isSensor;\r\n        def.restitution = this.restitution;\r\n        Physics2D.I._factory.resetFixtureData(this.fixture, def);\r\n        this._setShapeData(this.fixture.shape);\r\n    }\r\n\r\n    protected _onEnable(): void {\r\n        if (this.owner.getComponent(RigidBody)) {\r\n            this.rigidBody = this.owner.getComponent(RigidBody)\r\n            this._needupdataShapeAttribute();\r\n        }\r\n    }\r\n\r\n    protected _onAwake(): void {\r\n        if (this.owner.getComponent(RigidBody)) {\r\n            this.rigidBody = this.owner.getComponent(RigidBody)\r\n            this._needupdataShapeAttribute();\r\n        }\r\n    }\r\n\r\n    /**通知rigidBody 更新shape 属性值 */\r\n    protected _needupdataShapeAttribute(): void {\r\n        if (!this.rigidBody) {\r\n            return;\r\n        }\r\n        this.rigidBody._needrefeshShape();\r\n    }\r\n\r\n\r\n    /**是否是传感器，传感器能够触发碰撞事件，但不会产生碰撞反应*/\r\n    get isSensor(): boolean {\r\n        return this._isSensor;\r\n    }\r\n\r\n    set isSensor(value: boolean) {\r\n        if (this._isSensor == value) return;\r\n        this._isSensor = value;\r\n        this._needupdataShapeAttribute();\r\n    }\r\n\r\n    /**密度值，值可以为零或者是正数，建议使用相似的密度，这样做可以改善堆叠稳定性，默认值为10*/\r\n    get density(): number {\r\n        return this._density;\r\n    }\r\n\r\n    set density(value: number) {\r\n        if (this._density == value) return;\r\n        this._density = value;\r\n        this._needupdataShapeAttribute();\r\n    }\r\n\r\n    /**摩擦力，取值范围0-1，值越大，摩擦越大，默认值为0.2*/\r\n    get friction(): number {\r\n        return this._friction;\r\n    }\r\n\r\n    set friction(value: number) {\r\n        if (this._friction == value) return;\r\n        this._friction = value;\r\n        this._needupdataShapeAttribute();\r\n    }\r\n\r\n    /**弹性系数，取值范围0-1，值越大，弹性越大，默认值为0*/\r\n    get restitution(): number {\r\n        return this._restitution;\r\n    }\r\n\r\n    set restitution(value: number) {\r\n        if (this._restitution == value) return;\r\n        this._restitution = value;\r\n        this._needupdataShapeAttribute();\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * 碰撞体参数发生变化后，刷新物理世界碰撞信息\r\n     */\r\n    refresh(): void {\r\n        if (!this.enabled) {\r\n            return;\r\n        }\r\n        let factory = Physics2D.I._factory;\r\n        if (!this.fixture) this.createfixture();\r\n        else this.resetFixtureData();\r\n        factory.set_fixtureDef_GroupIndex(this.fixture, this.rigidBody.group);\r\n        factory.set_fixtureDef_CategoryBits(this.fixture, this.rigidBody.category);\r\n        factory.set_fixtureDef_maskBits(this.fixture, this.rigidBody.mask);\r\n        factory.set_fixture_collider(this.fixture, this);\r\n    }\r\n\r\n    protected _onDisable(): void {\r\n        let factory = Physics2D.I._factory;\r\n        if (this.fixture && this.rigidBody._getOriBody()) {\r\n            factory.rigidBody_DestroyFixture(this.rigidBody.body, this.fixture);\r\n        }\r\n        this.fixture = null;\r\n        this.rigidBody = null;\r\n    }\r\n}\r\n","import { ColliderBase } from \"./ColliderBase\";\r\nimport { Physics2D } from \"../Physics2D\";\r\nimport { PhysicsShape } from \"./ColliderStructInfo\";\r\n\r\n\r\n/**\r\n * 2D矩形碰撞体\r\n */\r\nexport class BoxCollider extends ColliderBase {\r\n\r\n    /**矩形宽度*/\r\n    private _width: number = 100;\r\n    /**矩形高度*/\r\n    private _height: number = 100;\r\n\r\n    /**\r\n    * 创建一个新的 <code>BoxCollider</code> 实例。\r\n    */\r\n    constructor() {\r\n        super();\r\n        this._physicShape = PhysicsShape.BoxShape;\r\n    }\r\n\r\n    /**@override */\r\n    protected _setShapeData(shape: any): void {\r\n        let helfW: number = this._width * 0.5;\r\n        let helfH: number = this._height * 0.5;\r\n        var center = {\r\n            x: helfW + this.pivotoffx,\r\n            y: helfH + this.pivotoffy\r\n        }\r\n        Physics2D.I._factory.set_collider_SetAsBox(shape, helfW, helfH, center, Math.abs(this.scaleX), Math.abs(this.scaleY));\r\n    }\r\n\r\n    /**矩形宽度*/\r\n    get width(): number {\r\n        return this._width;\r\n    }\r\n\r\n    set width(value: number) {\r\n        if (value <= 0) throw \"BoxCollider size cannot be less than 0\";\r\n        if (this._width == value) return;\r\n        this._width = value;\r\n        this._needupdataShapeAttribute();\r\n    }\r\n\r\n    /**矩形高度*/\r\n    get height(): number {\r\n        return this._height;\r\n    }\r\n\r\n    set height(value: number) {\r\n        if (value <= 0) throw \"BoxCollider size cannot be less than 0\";\r\n        if (this._height == value) return;\r\n        this._height = value;\r\n        this._needupdataShapeAttribute();\r\n    }\r\n\r\n}\r\n","import { ColliderBase } from \"./ColliderBase\";\r\nimport { Physics2D } from \"../Physics2D\";\r\nimport { PhysicsShape } from \"./ColliderStructInfo\";\r\nimport { Sprite } from \"../../display/Sprite\";\r\n\r\n/**\r\n * 2D线形碰撞体\r\n */\r\nexport class ChainCollider extends ColliderBase {\r\n\r\n    /**\r\n     * @deprecated\r\n     * 用逗号隔开的点的集合，格式：x,y,x,y ...\r\n     */\r\n    private _points: string = \"0,0,100,0\";\r\n\r\n    /**顶点数据*/\r\n    private _datas: number[] = [];\r\n\r\n    /**是否是闭环，注意不要有自相交的链接形状，它可能不能正常工作*/\r\n    private _loop: boolean = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this._physicShape = PhysicsShape.ChainShape;\r\n    }\r\n\r\n    /**\r\n    * @override\r\n    */\r\n    protected _setShapeData(shape: any): void {\r\n        var len: number = this._datas.length;\r\n        if (len % 2 == 1) throw \"ChainCollider datas lenth must a multiplier of 2\";\r\n        Physics2D.I._factory.set_ChainShape_data(shape, this.pivotoffx, this.pivotoffy, this._datas, this._loop, this.scaleX, this.scaleY);\r\n    }\r\n\r\n    /**\r\n     * @deprecated\r\n     * 用逗号隔开的点的集合，格式：x,y,x,y ...\r\n     */\r\n    get points(): string {\r\n        return this._points;\r\n    }\r\n    onAdded() {\r\n        super.onAdded();\r\n        let sp = this.owner as Sprite;\r\n        this._datas.push(0, 0, sp.width, 0, 0, sp.height, sp.width, sp.height);\r\n    }\r\n\r\n    set points(value: string) {\r\n        if (!value) throw \"ChainCollider points cannot be empty\";\r\n        this._points = value;\r\n        var arr: any[] = this._points.split(\",\");\r\n        let length = arr.length;\r\n        this._datas = [];\r\n        for (var i: number = 0, n: number = length; i < n; i++) {\r\n            this._datas.push(parseInt(arr[i]));\r\n        }\r\n        this._needupdataShapeAttribute();\r\n    }\r\n\r\n    /**顶点数据 x,y,x,y ...*/\r\n    get datas(): number[] {\r\n        return this._datas;\r\n    }\r\n\r\n    set datas(value: number[]) {\r\n        if (!value) throw \"ChainCollider datas cannot be empty\";\r\n        this._datas = value;\r\n        this._needupdataShapeAttribute();\r\n    }\r\n\r\n    /**是否是闭环，注意不要有自相交的链接形状，它可能不能正常工作*/\r\n    get loop(): boolean {\r\n        return this._loop;\r\n    }\r\n\r\n    set loop(value: boolean) {\r\n        if (this._loop == value) return;\r\n        this._loop = value;\r\n        this._needupdataShapeAttribute();\r\n    }\r\n}","import { ColliderBase } from \"./ColliderBase\";\r\nimport { Physics2D } from \"../Physics2D\";\r\nimport { PhysicsShape } from \"./ColliderStructInfo\";\r\n\r\n/**\r\n * 2D圆形碰撞体\r\n */\r\nexport class CircleCollider extends ColliderBase {\r\n\r\n    /**圆形半径，必须为正数*/\r\n    private _radius: number = 50;\r\n\r\n    constructor() {\r\n        super();\r\n        this._physicShape = PhysicsShape.CircleShape;\r\n    }\r\n\r\n    /**\r\n    * @override\r\n    */\r\n    protected _setShapeData(shape: any): void {\r\n        var scale: number = Math.max(Math.abs(this.scaleX), Math.abs(this.scaleY));\r\n        let radius = this.radius;\r\n        Physics2D.I._factory.set_CircleShape_radius(shape, radius, scale);\r\n        Physics2D.I._factory.set_CircleShape_pos(shape, this.x, this.y, scale);\r\n    }\r\n\r\n    /**圆形半径，必须为正数*/\r\n    get radius(): number {\r\n        return this._radius;\r\n    }\r\n\r\n    set radius(value: number) {\r\n        if (value <= 0) throw \"CircleCollider radius cannot be less than 0\";\r\n        if (this._radius == value) return;\r\n        this._radius = value;\r\n        this._needupdataShapeAttribute();\r\n    }\r\n\r\n\r\n}","import { ColliderBase } from \"./ColliderBase\";\r\nimport { Physics2D } from \"../Physics2D\";\r\nimport { PhysicsShape } from \"./ColliderStructInfo\";\r\n\r\n/**\r\n * 2D边框碰撞体\r\n */\r\nexport class EdgeCollider extends ColliderBase {\r\n    /**\r\n     * @deprecated\r\n     * 用逗号隔开的点的集合，注意只有两个点，格式：x,y,x,y\r\n     */\r\n    private _points: string = \"0,0,100,0\";\r\n\r\n    /**顶点数据*/\r\n    private _datas: number[] = [0, 0, 100, 0];\r\n\r\n    constructor() {\r\n        super();\r\n        this._physicShape = PhysicsShape.EdgeShape;\r\n    }\r\n\r\n    /**\r\n     * @override\r\n     */\r\n    protected _setShapeData(shape: any): void {\r\n        var len: number = this._datas.length;\r\n        if (len % 2 == 1) throw \"EdgeCollider points lenth must a multiplier of 2\";\r\n        Physics2D.I._factory.set_EdgeShape_data(shape, this.pivotoffx, this.pivotoffy, this._datas, this.scaleX, this.scaleY);\r\n    }\r\n\r\n    /**\r\n     * @deprecated\r\n     * 用逗号隔开的点的集合，注意只有两个点，格式：x,y,x,y*/\r\n    get points(): string {\r\n        return this._points;\r\n    }\r\n\r\n    set points(value: string) {\r\n        if (!value) throw \"EdgeCollider points cannot be empty\";\r\n        this._points = value;\r\n        var arr: any[] = this._points.split(\",\");\r\n        let length = arr.length;\r\n        this._datas = [];\r\n        for (var i: number = 0, n: number = length; i < n; i++) {\r\n            this._datas.push(parseInt(arr[i]));\r\n        }\r\n        this._needupdataShapeAttribute();\r\n    }\r\n\r\n    /**顶点数据 x,y,x,y ...*/\r\n    get datas(): number[] {\r\n        return this._datas;\r\n    }\r\n\r\n    set datas(value: number[]) {\r\n        if (!value) throw \"EdgeCollider points cannot be empty\";\r\n        this._datas = value;\r\n        this._needupdataShapeAttribute();\r\n    }\r\n}","import { ColliderBase } from \"./ColliderBase\";\r\nimport { Physics2D } from \"../Physics2D\";\r\nimport { PhysicsShape } from \"./ColliderStructInfo\";\r\nimport { Sprite } from \"../../display/Sprite\";\r\n\r\n/**\r\n * 2D多边形碰撞体，暂时不支持凹多边形，如果是凹多边形，先手动拆分为多个凸多边形\r\n * 节点个数最多是b2_maxPolygonVertices，这数值默认是8，所以点的数量不建议超过8个，也不能小于3个\r\n */\r\nexport class PolygonCollider extends ColliderBase {\r\n\r\n    /**\r\n     * @deprecated\r\n     * 用逗号隔开的点的集合，格式：x,y,x,y ...\r\n     */\r\n    private _points: string = \"50,0,100,100,0,100\";\r\n\r\n    /**顶点数据*/\r\n    private _datas: number[] = [];\r\n\r\n    constructor() {\r\n        super();\r\n        this._physicShape = PhysicsShape.PolygonShape;\r\n    }\r\n    onAdded() {\r\n        super.onAdded();\r\n        let sp = this.owner as Sprite;\r\n        this._datas.push(0, 0, sp.width, sp.height * 0.5, 0, sp.height);\r\n    }\r\n\r\n    /**\r\n    * @override\r\n    */\r\n    protected _setShapeData(shape: any): void {\r\n        var len: number = this.datas.length;\r\n        if (len < 6) throw \"PolygonCollider points must be greater than 3\";\r\n        if (len % 2 == 1) throw \"PolygonCollider points lenth must a multiplier of 2\";\r\n        Physics2D.I._factory.set_PolygonShape_data(shape, this.pivotoffx, this.pivotoffy, this.datas, this.scaleX, this.scaleY);\r\n    }\r\n\r\n    /**\r\n     * @deprecated\r\n     * 用逗号隔开的点的集合，格式：x,y,x,y ...\r\n     */\r\n    get points(): string {\r\n        return this._points;\r\n    }\r\n\r\n    set points(value: string) {\r\n        if (!value) throw \"PolygonCollider points cannot be empty\";\r\n        this._points = value;\r\n        var arr: any[] = this._points.split(\",\");\r\n        let length = arr.length;\r\n        this._datas = [];\r\n        for (var i: number = 0, n: number = length; i < n; i++) {\r\n            this._datas.push(parseInt(arr[i]))\r\n        }\r\n        this._needupdataShapeAttribute();\r\n    }\r\n\r\n    /**顶点数据 x,y,x,y ...*/\r\n    get datas(): number[] {\r\n        return this._datas;\r\n    }\r\n\r\n    set datas(value: number[]) {\r\n        if (!value) throw \"PolygonCollider points cannot be empty\";\r\n        this._datas = value;\r\n        this._needupdataShapeAttribute();\r\n    }\r\n}","import { Component } from \"../../components/Component\"\r\nimport { Sprite } from \"../../display/Sprite\";\r\nimport { Point } from \"../../maths/Point\";\r\nimport { IPhysiscs2DFactory } from \"../IPhysiscs2DFactory\";\r\nimport { Physics2D } from \"../Physics2D\"\r\nimport { RigidBody } from \"../RigidBody\";\r\n\r\n/**\r\n * 关节基类\r\n */\r\nexport class JointBase extends Component {\r\n    /**原生关节对象*/\r\n    protected _joint: any;\r\n\r\n    protected _factory: IPhysiscs2DFactory;\r\n    constructor() {\r\n        super();\r\n        this._factory = Physics2D.I._factory;\r\n        this._singleton = false;\r\n    }\r\n\r\n    protected getBodyAnchor(body: RigidBody, anchorx: number, anchory: number): Point {\r\n        Point.TEMP.setTo(anchorx, anchory)\r\n        let node = <Sprite>body.owner;\r\n        if (node) {\r\n            if (node.transform) {\r\n                node.transform.transformPointN(Point.TEMP)\r\n            } else {\r\n                Point.TEMP.x *= node.scaleX;\r\n                Point.TEMP.y *= node.scaleY;\r\n            }\r\n        }\r\n        return Point.TEMP;\r\n    }\r\n\r\n    /**[只读]原生关节对象*/\r\n    get joint(): any {\r\n        if (!this._joint) this._createJoint();\r\n        return this._joint;\r\n    }\r\n\r\n    protected _onEnable(): void {\r\n        this._createJoint();\r\n    }\r\n\r\n    protected _onAwake(): void {\r\n        this._createJoint();\r\n    }\r\n\r\n    protected _createJoint(): void {\r\n    }\r\n\r\n    protected _onDisable(): void {\r\n        if (this._joint && this._factory.getJoint_userData(this._joint) && !this._factory.getJoint_userData_destroy(this._joint)) {\r\n            Physics2D.I._factory.removeJoint(this._joint);\r\n        }\r\n        this._joint = null;\r\n    }\r\n}\r\n","import { Vector2 } from \"../../maths/Vector2\";\r\n\r\n/**\r\n * Box2D distance Joint def Struct\r\n */\r\nexport class physics2D_DistancJointDef {\r\n    bodyA: any;\r\n    bodyB: any;\r\n    localAnchorA: Vector2 = new Vector2();\r\n    localAnchorB: Vector2 = new Vector2();\r\n    frequency: number;\r\n    dampingRatio: number;\r\n    collideConnected: boolean;\r\n    length: number;\r\n    maxLength: number;\r\n    minLength: number;\r\n    isLocalAnchor: boolean\r\n}\r\n\r\nexport class physics2D_GearJointDef {\r\n    bodyA: any;\r\n    bodyB: any;\r\n    joint1: any;\r\n    joint2: any;\r\n    ratio: number;\r\n    collideConnected: boolean;\r\n}\r\n\r\n\r\nexport class physics2D_MotorJointDef {\r\n    bodyA: any;\r\n    bodyB: any;\r\n    linearOffset: Vector2 = new Vector2();\r\n    angularOffset: number;\r\n    maxForce: number;\r\n    maxTorque: number;\r\n    correctionFactor: number;\r\n    collideConnected: boolean;\r\n}\r\n\r\nexport class physics2D_MouseJointJointDef {\r\n    bodyA: any;\r\n    bodyB: any;\r\n    maxForce: number;\r\n    frequency: number;\r\n    dampingRatio: number;\r\n    target: Vector2 = new Vector2();\r\n}\r\n\r\nexport class physics2D_PrismaticJointDef {\r\n    bodyA: any;\r\n    bodyB: any;\r\n    anchor: Vector2 = new Vector2();\r\n    axis: Vector2 = new Vector2();\r\n    enableMotor: boolean;\r\n    motorSpeed: number;\r\n    maxMotorForce: number;\r\n    enableLimit: boolean;\r\n    lowerTranslation: number;\r\n    upperTranslation: number;\r\n    collideConnected: boolean;\r\n}\r\n\r\nexport class physics2D_PulleyJointDef {\r\n    bodyA: any;\r\n    bodyB: any;\r\n    groundAnchorA: Vector2 = new Vector2();\r\n    groundAnchorB: Vector2 = new Vector2();\r\n    localAnchorA: Vector2 = new Vector2();\r\n    localAnchorB: Vector2 = new Vector2();\r\n    ratio: number;\r\n    collideConnected: boolean;\r\n}\r\n\r\nexport class physics2D_RevoluteJointDef {\r\n    bodyA: any;\r\n    bodyB: any;\r\n    anchor: Vector2 = new Vector2();\r\n    enableMotor: boolean;\r\n    motorSpeed: number;\r\n    maxMotorTorque: number;\r\n    enableLimit: boolean;\r\n    lowerAngle: number;\r\n    upperAngle: number;\r\n    collideConnected: boolean;\r\n}\r\n\r\nexport class physics2D_WeldJointDef {\r\n    bodyA: any;\r\n    bodyB: any;\r\n    anchor: Vector2 = new Vector2();\r\n    frequency: number;\r\n    dampingRatio: number;\r\n    collideConnected: boolean;\r\n}\r\n\r\nexport class physics2D_WheelJointDef {\r\n    bodyA: any;\r\n    bodyB: any;\r\n    anchor: Vector2 = new Vector2();\r\n    axis: Vector2 = new Vector2();\r\n    enableMotor: boolean;\r\n    motorSpeed: number;\r\n    maxMotorTorque: number;\r\n    enableLimit: boolean;\r\n    lowerTranslation: number;\r\n    upperTranslation: number;\r\n    frequency: number;\r\n    dampingRatio: number;\r\n    collideConnected: boolean;\r\n}\r\n\r\n","import { JointBase } from \"./JointBase\";\r\nimport { Physics2D } from \"../Physics2D\"\r\nimport { RigidBody } from \"../RigidBody\"\r\nimport { physics2D_DistancJointDef } from \"./JointDefStructInfo\";\r\nimport { Sprite } from \"../../display/Sprite\";\r\n\r\n/**\r\n * 距离关节：两个物体上面各自有一点，两点之间的距离固定不变\r\n */\r\nexport class DistanceJoint extends JointBase {\r\n    /**@private */\r\n    private static _temp: physics2D_DistancJointDef;\r\n    /**[首次设置有效]关节的自身刚体*/\r\n    selfBody: RigidBody;\r\n    /**[首次设置有效]关节的连接刚体，可不设置，默认为左上角空刚体*/\r\n    otherBody: RigidBody;\r\n    /**[首次设置有效]自身刚体链接点，是相对于自身刚体的左上角位置偏移*/\r\n    selfAnchor: any[] = [0, 0];\r\n    /**[首次设置有效]链接刚体链接点，是相对于otherBody的左上角位置偏移*/\r\n    otherAnchor: any[] = [0, 0];\r\n    /**[首次设置有效]两个刚体是否可以发生碰撞，默认为false*/\r\n    collideConnected: boolean = false;\r\n\r\n    /**约束的目标静止长度*/\r\n    private _length: number = 0;\r\n    /**约束的最小长度，-1表示使用默认值*/\r\n    private _maxLength: number = -1;\r\n    /**约束的最大长度，-1表示使用默认值*/\r\n    private _minLength: number = -1;\r\n\r\n    /**弹簧系统的震动频率，可以视为弹簧的弹性系数，通常频率应该小于时间步长频率的一半*/\r\n    private _frequency: number = 1;\r\n    /**刚体在回归到节点过程中受到的阻尼比，建议取值0~1*/\r\n    private _dampingRatio: number = 0;\r\n\r\n    /**\r\n     * @override\r\n     */\r\n    protected _createJoint(): void {\r\n        if (!this._joint) {\r\n            let node = <Sprite>this.owner;\r\n            this.selfBody = this.selfBody || node.getComponent(RigidBody);\r\n            if (!this.selfBody) throw \"selfBody can not be empty\";\r\n            let point = this.getBodyAnchor(this.selfBody, this.selfAnchor[0], this.selfAnchor[1]);\r\n            var def = DistanceJoint._temp || (DistanceJoint._temp = new physics2D_DistancJointDef());\r\n            def.bodyB = this.selfBody.getBody();\r\n            def.localAnchorB.setValue(point.x, point.y);\r\n            this.selfBody.owner.on(\"shapeChange\", this, this._refeahJoint);\r\n            if (this.otherBody) {\r\n                def.bodyA = this.otherBody.getBody();\r\n                point = this.getBodyAnchor(this.otherBody, this.otherAnchor[0], this.otherAnchor[1]);\r\n                def.localAnchorA.setValue(point.x, point.y);\r\n                this.otherBody.owner.on(\"shapeChange\", this, this._refeahJoint);\r\n            } else {\r\n                def.bodyA = Physics2D.I._emptyBody;\r\n                def.localAnchorA.setValue(this.otherAnchor[0], this.otherAnchor[1]);\r\n            }\r\n\r\n            def.dampingRatio = this._dampingRatio;\r\n            def.frequency = this._frequency;\r\n            def.collideConnected = this.collideConnected;\r\n            def.length = this._length;\r\n            def.maxLength = this._maxLength;\r\n            def.minLength = this._minLength;\r\n            this._joint = this._factory.createDistanceJoint(def);\r\n\r\n        }\r\n    }\r\n\r\n    /**@internal */\r\n    _refeahJoint(): void {\r\n        if (this._joint) {\r\n            this._factory.set_DistanceJointStiffnessDamping(this._joint, this._frequency, this._dampingRatio);\r\n        }\r\n    }\r\n\r\n    onDestroy(): void {\r\n        super.onDestroy();\r\n        this.selfBody.owner.off(\"shapeChange\", this._refeahJoint);\r\n        if (this.otherBody) this.otherBody.owner.off(\"shapeChange\", this._refeahJoint);\r\n    }\r\n\r\n    /**约束的目标静止长度*/\r\n    get length(): number {\r\n        return this._length;\r\n    }\r\n\r\n    set length(value: number) {\r\n        this._length = value;\r\n        if (this._joint) this._factory.set_DistanceJoint_length(this._joint, value);\r\n    }\r\n\r\n    /**约束的最小长度*/\r\n    get minLength(): number {\r\n        return this._minLength;\r\n    }\r\n\r\n    set minLength(value: number) {\r\n        this._minLength = value;\r\n        if (this._joint) this._factory.set_DistanceJoint_MinLength(this._joint, value);\r\n    }\r\n\r\n    /**约束的最大长度*/\r\n    get maxLength(): number {\r\n        return this._maxLength;\r\n    }\r\n\r\n    set maxLength(value: number) {\r\n        this._maxLength = value;\r\n        if (this._joint) this._factory.set_DistanceJoint_MaxLength(this._joint, value);\r\n    }\r\n\r\n    /**弹簧系统的震动频率，可以视为弹簧的弹性系数，通常频率应该小于时间步长频率的一半*/\r\n    get frequency(): number {\r\n        return this._frequency;\r\n    }\r\n\r\n    set frequency(value: number) {\r\n        this._frequency = value;\r\n        if (this._joint) {\r\n            this._factory.set_DistanceJointStiffnessDamping(this._joint, this._frequency, this._dampingRatio);\r\n        }\r\n    }\r\n\r\n    /**刚体在回归到节点过程中受到的阻尼比，建议取值0~1*/\r\n    get damping(): number {\r\n        return this._dampingRatio;\r\n    }\r\n\r\n    set damping(value: number) {\r\n        this._dampingRatio = value;\r\n        if (this._joint) {\r\n            this._factory.set_DistanceJointStiffnessDamping(this._joint, this._frequency, this._dampingRatio);\r\n        }\r\n    }\r\n\r\n    /**刚体当前长度*/\r\n    get jointLength(): number {\r\n        if (this._joint) {\r\n            return this._factory.phyToLayaValue(this.joint.GetLength())\r\n        } else {\r\n            return 0;\r\n        }\r\n\r\n    }\r\n}\r\n","import { JointBase } from \"./JointBase\";\r\nimport { RigidBody } from \"../RigidBody\"\r\nimport { RevoluteJoint } from \"./RevoluteJoint\";\r\nimport { PrismaticJoint } from \"./PrismaticJoint\";\r\nimport { physics2D_GearJointDef } from \"./JointDefStructInfo\";\r\n\r\n/**\r\n * 齿轮关节：用来模拟两个齿轮间的约束关系，齿轮旋转时，产生的动量有两种输出方式，一种是齿轮本身的角速度，另一种是齿轮表面的线速度\r\n */\r\nexport class GearJoint extends JointBase {\r\n    /**@private */\r\n    private static _temp: physics2D_GearJointDef;\r\n    /**[首次设置有效]要绑定的第1个关节，类型可以是RevoluteJoint或者PrismaticJoint*/\r\n    joint1: RevoluteJoint | PrismaticJoint;\r\n    /**[首次设置有效]要绑定的第2个关节，类型可以是RevoluteJoint或者PrismaticJoint*/\r\n    joint2: RevoluteJoint | PrismaticJoint;\r\n    /**[首次设置有效]两个刚体是否可以发生碰撞，默认为false*/\r\n    collideConnected: boolean = false;\r\n\r\n    /**两个齿轮角速度比例，默认1*/\r\n    private _ratio: number = 1;\r\n    /**\r\n     * @override\r\n     * \r\n     */\r\n    protected _createJoint(): void {\r\n        if (!this._joint) {\r\n            if (!this.joint1) throw \"Joint1 can not be empty\";\r\n            if (!this.joint2) throw \"Joint2 can not be empty\";\r\n\r\n            var def: physics2D_GearJointDef = GearJoint._temp || (GearJoint._temp = new physics2D_GearJointDef());\r\n            def.bodyA = this.joint1.owner.getComponent(RigidBody).getBody();\r\n            def.bodyB = this.joint2.owner.getComponent(RigidBody).getBody();\r\n            def.joint1 = this.joint1.joint;\r\n            def.joint2 = this.joint2.joint;\r\n            def.ratio = -this._ratio;\r\n            def.collideConnected = this.collideConnected;\r\n            this._joint = this._factory.create_GearJoint(def);\r\n        }\r\n    }\r\n\r\n    /**两个齿轮角速度比例，默认1*/\r\n    get ratio(): number {\r\n        return this._ratio;\r\n    }\r\n\r\n    set ratio(value: number) {\r\n        this._ratio = value;\r\n        if (this._joint) this._factory.set_GearJoint_SetRatio(this._joint, value);\r\n    }\r\n}","import { JointBase } from \"./JointBase\";\r\nimport { RigidBody } from \"../RigidBody\"\r\nimport { physics2D_MotorJointDef } from \"./JointDefStructInfo\";\r\nimport { Utils } from \"../../utils/Utils\";\r\n\r\n/**\r\n * 马达关节：用来限制两个刚体，使其相对位置和角度保持不变\r\n */\r\nexport class MotorJoint extends JointBase {\r\n    /**@private */\r\n    private static _temp: physics2D_MotorJointDef;\r\n    /**[首次设置有效]关节的自身刚体*/\r\n    selfBody: RigidBody;\r\n    /**[首次设置有效]关节的连接刚体*/\r\n    otherBody: RigidBody;\r\n    /**[首次设置有效]两个刚体是否可以发生碰撞，默认为false*/\r\n    collideConnected: boolean = false;\r\n\r\n    /**基于otherBody坐标位置的偏移量，也是selfBody的目标位置*/\r\n    private _linearOffset: any[] = [0, 0];\r\n    /**基于otherBody的角度偏移量，也是selfBody的目标角度*/\r\n    private _angularOffset: number = 0;\r\n    /**当selfBody偏离目标位置时，为使其恢复到目标位置，马达关节所施加的最大作用力*/\r\n    private _maxForce: number = 1000;\r\n    /**当selfBody角度与目标角度不同时，为使其达到目标角度，马达关节施加的最大扭力*/\r\n    private _maxTorque: number = 1000;\r\n    /**selfBody向目标位置移动时的缓动因子，取值0~1，值越大速度越快*/\r\n    private _correctionFactor: number = 0.3;\r\n    /**\r\n     * @override\r\n     * \r\n     */\r\n    protected _createJoint(): void {\r\n        if (!this._joint) {\r\n            if (!this.otherBody) throw \"otherBody can not be empty\";\r\n            this.selfBody = this.selfBody || this.owner.getComponent(RigidBody);\r\n            if (!this.selfBody) throw \"selfBody can not be empty\";\r\n\r\n            var def: physics2D_MotorJointDef = MotorJoint._temp || (MotorJoint._temp = new physics2D_MotorJointDef());\r\n            def.bodyA = this.selfBody.getBody();\r\n            def.bodyB = this.otherBody.getBody();\r\n            def.linearOffset.setValue(this._linearOffset[0], this._linearOffset[1]);\r\n            def.angularOffset = Utils.toRadian(-this._angularOffset);\r\n            def.maxForce = this._maxForce;\r\n            def.maxTorque = this._maxTorque;\r\n            def.correctionFactor = this._correctionFactor;\r\n            def.collideConnected = this.collideConnected;\r\n            this._joint = this._factory.create_MotorJoint(def);\r\n        }\r\n    }\r\n\r\n    /**基于otherBody坐标位置的偏移量，也是selfBody的目标位置*/\r\n    get linearOffset(): any[] {\r\n        return this._linearOffset;\r\n    }\r\n\r\n    set linearOffset(value: any[]) {\r\n        this._linearOffset = value;\r\n        if (this._joint) {\r\n            this._factory.set_MotorJoint_linearOffset(this._joint, value[0], value[1]);\r\n        }\r\n    }\r\n\r\n    /**基于otherBody的角度偏移量，也是selfBody的目标角度*/\r\n    get angularOffset(): number {\r\n        return this._angularOffset;\r\n    }\r\n\r\n    set angularOffset(value: number) {\r\n        this._angularOffset = value;\r\n        if (this._joint) this._factory.set_MotorJoint_SetAngularOffset(this._joint, Utils.toRadian(-value));\r\n    }\r\n\r\n    /**当selfBody偏离目标位置时，为使其恢复到目标位置，马达关节所施加的最大作用力*/\r\n    get maxForce(): number {\r\n        return this._maxForce;\r\n    }\r\n\r\n    set maxForce(value: number) {\r\n        this._maxForce = value;\r\n        if (this._joint) this._factory.set_MotorJoint_SetMaxForce(this._joint, value)\r\n    }\r\n\r\n    /**当selfBody角度与目标角度不同时，为使其达到目标角度，马达关节施加的最大扭力*/\r\n    get maxTorque(): number {\r\n        return this._maxTorque;\r\n    }\r\n\r\n    set maxTorque(value: number) {\r\n        this._maxTorque = value;\r\n        if (this._joint) this._factory.set_MotorJoint_SetMaxTorque(this._joint, value)\r\n    }\r\n\r\n    /**selfBody向目标位置移动时的缓动因子，取值0~1，值越大速度越快*/\r\n    get correctionFactor(): number {\r\n        return this._correctionFactor;\r\n    }\r\n\r\n    set correctionFactor(value: number) {\r\n        this._correctionFactor = value;\r\n        if (this._joint) this._factory.set_MotorJoint_SetCorrectionFactor(this._joint, value)\r\n    }\r\n}","import { JointBase } from \"./JointBase\";\r\nimport { Sprite } from \"../../display/Sprite\"\r\nimport { Event } from \"../../events/Event\"\r\nimport { Point } from \"../../maths/Point\"\r\nimport { Physics2D } from \"../Physics2D\"\r\nimport { RigidBody } from \"../RigidBody\"\r\nimport { ILaya } from \"../../../ILaya\";\r\nimport { physics2D_MouseJointJointDef } from \"./JointDefStructInfo\";\r\n\r\n/**\r\n * 鼠标关节：鼠标关节用于通过鼠标来操控物体。它试图将物体拖向当前鼠标光标的位置。而在旋转方面就没有限制。\r\n */\r\nexport class MouseJoint extends JointBase {\r\n    /**@private */\r\n    private static _temp: physics2D_MouseJointJointDef;\r\n    /**[首次设置有效]关节的自身刚体*/\r\n    selfBody: RigidBody;\r\n    /**[首次设置有效]关节的链接点，是相对于自身刚体的左上角位置偏移，如果不设置，则根据鼠标点击点作为连接点*/\r\n    anchor: any[];\r\n\r\n    /**鼠标关节在拖曳刚体bodyB时施加的最大作用力*/\r\n    private _maxForce: number = 1000;\r\n    /**弹簧系统的震动频率，可以视为弹簧的弹性系数，通常频率应该小于时间步长频率的一半*/\r\n    private _frequency: number = 5;\r\n    /**刚体在回归到节点过程中受到的阻尼比，建议取值0~1*/\r\n    private _dampingRatio: number = 0.7;\r\n\r\n    protected _onEnable(): void {\r\n        (<Sprite>this.owner).mouseEnabled = true;\r\n        this.owner.on(Event.MOUSE_DOWN, this, this.onMouseDown);\r\n    }\r\n    protected _onAwake(): void {\r\n\r\n    }\r\n\r\n    private onMouseDown(): void {\r\n        this._createJoint();\r\n        ILaya.stage.on(Event.MOUSE_MOVE, this, this.onMouseMove);\r\n        ILaya.stage.once(Event.MOUSE_UP, this, this.onStageMouseUp);\r\n        ILaya.stage.once(Event.MOUSE_OUT, this, this.onStageMouseUp);\r\n    }\r\n    /**\r\n     * @override\r\n     * \r\n     */\r\n    protected _createJoint(): void {\r\n        if (!this._joint) {\r\n            this.selfBody = this.selfBody || this.owner.getComponent(RigidBody);\r\n            if (!this.selfBody) throw \"selfBody can not be empty\";\r\n\r\n            var def: physics2D_MouseJointJointDef = MouseJoint._temp || (MouseJoint._temp = new physics2D_MouseJointJointDef());\r\n            if (this.anchor) {\r\n                var anchorPos: Point = (<Sprite>this.selfBody.owner).localToGlobal(Point.TEMP.setTo(this.anchor[0], this.anchor[1]), false, Physics2D.I.worldRoot);\r\n            } else {\r\n                anchorPos = Physics2D.I.worldRoot.globalToLocal(Point.TEMP.setTo(ILaya.stage.mouseX, ILaya.stage.mouseY));\r\n            }\r\n\r\n            def.bodyA = Physics2D.I._emptyBody;\r\n            def.bodyB = this.selfBody.getBody();\r\n            def.target.setValue(anchorPos.x, anchorPos.y);\r\n            def.maxForce = this._maxForce;\r\n            def.dampingRatio = this._dampingRatio;\r\n            def.frequency = this._frequency;\r\n            this._factory.set_rigidbody_Awake(def.bodyB, true);\r\n            this._joint = this._factory.create_MouseJoint(def);\r\n        }\r\n    }\r\n\r\n    private onStageMouseUp(): void {\r\n        ILaya.stage.off(Event.MOUSE_MOVE, this, this.onMouseMove);\r\n        ILaya.stage.off(Event.MOUSE_UP, this, this.onStageMouseUp);\r\n        ILaya.stage.off(Event.MOUSE_OUT, this, this.onStageMouseUp);\r\n        this._factory.removeJoint(this._joint);\r\n        this._joint = null;\r\n    }\r\n\r\n    private onMouseMove(): void {\r\n        if (this._joint) this._factory.set_MouseJoint_target(this._joint, Physics2D.I.worldRoot.mouseX, Physics2D.I.worldRoot.mouseY)\r\n    }\r\n\r\n    protected _onDisable(): void {\r\n        super._onDisable();\r\n        this.owner.off(Event.MOUSE_DOWN, this, this.onMouseDown);\r\n    }\r\n\r\n    /**鼠标关节在拖曳刚体bodyB时施加的最大作用力*/\r\n    get maxForce(): number {\r\n        return this._maxForce;\r\n    }\r\n\r\n    set maxForce(value: number) {\r\n        this._maxForce = value;\r\n        if (this._joint) this._factory.set_MotorJoint_SetMaxForce(this._joint, value);\r\n    }\r\n\r\n    /**弹簧系统的震动频率，可以视为弹簧的弹性系数，通常频率应该小于时间步长频率的一半*/\r\n    get frequency(): number {\r\n        return this._frequency;\r\n    }\r\n\r\n    set frequency(value: number) {\r\n        this._frequency = value;\r\n        if (this._joint) {\r\n            this._factory.set_MouseJoint_frequencyAndDampingRatio(this._joint, this._frequency, this._dampingRatio);\r\n        }\r\n    }\r\n\r\n    /**刚体在回归到节点过程中受到的阻尼比，建议取值0~1*/\r\n    get damping(): number {\r\n        return this._dampingRatio;\r\n    }\r\n\r\n    set damping(value: number) {\r\n        this._dampingRatio = value;\r\n        if (this._joint) {\r\n            this._factory.set_MouseJoint_frequencyAndDampingRatio(this._joint, this._frequency, this._dampingRatio);\r\n        }\r\n    }\r\n}\r\n","import { JointBase } from \"./JointBase\";\r\nimport { Physics2D } from \"../Physics2D\"\r\nimport { RigidBody } from \"../RigidBody\"\r\nimport { physics2D_PrismaticJointDef } from \"./JointDefStructInfo\";\r\nimport { Utils } from \"../../utils/Utils\";\r\n\r\n/**\r\n * 平移关节：移动关节允许两个物体沿指定轴相对移动，它会阻止相对旋转\r\n */\r\nexport class PrismaticJoint extends JointBase {\r\n    /**@private */\r\n    private static _temp: physics2D_PrismaticJointDef;\r\n    /**[首次设置有效]关节的自身刚体*/\r\n    selfBody: RigidBody;\r\n    /**[首次设置有效]关节的连接刚体，可不设置，默认为左上角空刚体*/\r\n    otherBody: RigidBody;\r\n    /**[首次设置有效]关节的控制点，是相对于自身刚体的左上角位置偏移*/\r\n    anchor: any[] = [0, 0];\r\n    /**\r\n     * @deprecated\r\n     * [首次设置有效]一个向量值，描述运动方向，比如1,0是沿X轴向右*/\r\n    _axis: any[] = [1, 0];\r\n    /**[首次设置有效]一个角度，描述运动方向，比如0是沿X轴向右*/\r\n    angle: number = 0;\r\n    /**[首次设置有效]两个刚体是否可以发生碰撞，默认为false*/\r\n    collideConnected: boolean = false;\r\n\r\n    /**是否开启马达，开启马达可使目标刚体运动*/\r\n    private _enableMotor: boolean = false;\r\n    /**启用马达后，在axis坐标轴上移动可以达到的最大速度*/\r\n    private _motorSpeed: number = 0;\r\n    /**启用马达后，可以施加的最大作用力*/\r\n    private _maxMotorForce: number = 10000;\r\n\r\n    /**是否对刚体的移动范围加以约束*/\r\n    private _enableLimit: boolean = false;\r\n    /**启用约束后，刚体移动范围的下限，是距离anchor的偏移量*/\r\n    private _lowerTranslation: number = 0;\r\n    /**启用约束后，刚体移动范围的上限，是距离anchor的偏移量*/\r\n    private _upperTranslation: number = 0;\r\n    /**\r\n     * @override\r\n     * \r\n     */\r\n    protected _createJoint(): void {\r\n        if (!this._joint) {\r\n\r\n            this.selfBody = this.selfBody || this.owner.getComponent(RigidBody);\r\n            if (!this.selfBody) throw \"selfBody can not be empty\";\r\n\r\n            var def: physics2D_PrismaticJointDef = PrismaticJoint._temp || (PrismaticJoint._temp = new physics2D_PrismaticJointDef());\r\n            def.bodyB = this.selfBody.getBody();\r\n            def.bodyA = this.otherBody ? this.otherBody.getBody() : Physics2D.I._emptyBody;\r\n            let p = this.selfBody.GetWorldPoint(this.anchor[0], this.anchor[1]);\r\n            def.anchor.setValue(p.x, p.y);\r\n            let radian = Utils.toRadian(this.angle);\r\n            def.axis.setValue(Math.cos(radian), Math.sin(radian));\r\n            def.enableMotor = this._enableMotor;\r\n            def.motorSpeed = this._motorSpeed;\r\n            def.maxMotorForce = this._maxMotorForce;\r\n            def.enableLimit = this._enableLimit;\r\n            def.lowerTranslation = this._lowerTranslation;\r\n            def.upperTranslation = this._upperTranslation;\r\n            def.collideConnected = this.collideConnected;\r\n\r\n            this._joint = this._factory.create_PrismaticJoint(def);\r\n        }\r\n    }\r\n\r\n    /**是否开启马达，开启马达可使目标刚体运动*/\r\n    get enableMotor(): boolean {\r\n        return this._enableMotor;\r\n    }\r\n\r\n    set enableMotor(value: boolean) {\r\n        this._enableMotor = value;\r\n        if (this._joint) this._factory.set_Joint_EnableMotor(this._joint, value);\r\n    }\r\n\r\n    /**启用马达后，在axis坐标轴上移动可以达到的最大速度*/\r\n    get motorSpeed(): number {\r\n        return this._motorSpeed;\r\n    }\r\n\r\n    set motorSpeed(value: number) {\r\n        this._motorSpeed = value;\r\n        if (this._joint) this._factory.set_Joint_SetMotorSpeed(this._joint, value);\r\n    }\r\n\r\n    /**启用马达后，可以施加的最大作用力*/\r\n    get maxMotorForce(): number {\r\n        return this._maxMotorForce;\r\n    }\r\n\r\n    set maxMotorForce(value: number) {\r\n        this._maxMotorForce = value;\r\n        if (this._joint) this._factory.set_Joint_SetMaxMotorTorque(this._joint, value);\r\n    }\r\n\r\n    /**是否对刚体的移动范围加以约束*/\r\n    get enableLimit(): boolean {\r\n        return this._enableLimit;\r\n    }\r\n\r\n    set enableLimit(value: boolean) {\r\n        this._enableLimit = value;\r\n        if (this._joint) this._factory.set_Joint_EnableLimit(this._joint, value);\r\n    }\r\n\r\n    /**启用约束后，刚体移动范围的下限，是距离anchor的偏移量*/\r\n    get lowerTranslation(): number {\r\n        return this._lowerTranslation;\r\n    }\r\n\r\n    set lowerTranslation(value: number) {\r\n        this._lowerTranslation = value;\r\n        if (this._joint) this._factory.set_Joint_SetLimits(this._joint, value, this._upperTranslation);\r\n    }\r\n\r\n    /**启用约束后，刚体移动范围的上限，是距离anchor的偏移量*/\r\n    get upperTranslation(): number {\r\n        return this._upperTranslation;\r\n    }\r\n\r\n    set upperTranslation(value: number) {\r\n        this._upperTranslation = value;\r\n        if (this._joint) this._factory.set_Joint_SetLimits(this._joint, this._lowerTranslation, value);\r\n    }\r\n\r\n    /**\r\n     * @deprecated\r\n     * 启用约束后，刚体移动范围的上限，是距离anchor的偏移量*/\r\n    get axis(): any {\r\n        return this._axis;\r\n    }\r\n\r\n    set axis(value: any) {\r\n        this._axis = value;\r\n        this.angle = Utils.toAngle(Math.atan2(value[1], value[0]));\r\n    }\r\n}","import { JointBase } from \"./JointBase\";\r\nimport { Point } from \"../../maths/Point\"\r\nimport { Physics2D } from \"../Physics2D\"\r\nimport { RigidBody } from \"../RigidBody\"\r\nimport { physics2D_PulleyJointDef } from \"./JointDefStructInfo\";\r\n\r\n/**\r\n * 滑轮关节：它将两个物体接地(ground)并彼此连接，当一个物体上升，另一个物体就会下降\r\n */\r\nexport class PulleyJoint extends JointBase {\r\n    /**@private */\r\n    private static _temp: physics2D_PulleyJointDef;\r\n    /**[首次设置有效]关节的自身刚体*/\r\n    selfBody: RigidBody;\r\n    /**[首次设置有效]关节的连接刚体*/\r\n    otherBody: RigidBody;\r\n    /**[首次设置有效]自身刚体链接点，是相对于自身刚体的左上角位置偏移*/\r\n    selfAnchor: any[] = [0, 0];\r\n    /**[首次设置有效]链接刚体链接点，是相对于otherBody的左上角位置偏移*/\r\n    otherAnchor: any[] = [0, 0];\r\n\r\n    /**[首次设置有效]滑轮上与节点selfAnchor相连接的节点，是相对于自身刚体的左上角位置偏移*/\r\n    selfGroundPoint: any[] = [0, -100];\r\n    /**[首次设置有效]滑轮上与节点otherAnchor相连接的节点，是相对于otherBody的左上角位置偏移*/\r\n    otherGroundPoint: any[] = [0, -100];\r\n    /**[首次设置有效]两刚体移动距离比率*/\r\n    ratio: number = 1;\r\n    /**[首次设置有效]两个刚体是否可以发生碰撞，默认为false*/\r\n    collideConnected: boolean = false;\r\n    /**\r\n     * @override\r\n     */\r\n    protected _createJoint(): void {\r\n        if (!this._joint) {\r\n            if (!this.otherBody) throw \"otherBody can not be empty\";\r\n            this.selfBody = this.selfBody || this.owner.getComponent(RigidBody);\r\n            if (!this.selfBody) throw \"selfBody can not be empty\";\r\n\r\n            var def: physics2D_PulleyJointDef = PulleyJoint._temp || (PulleyJoint._temp = new physics2D_PulleyJointDef);\r\n            def.bodyA = this.otherBody.getBody();\r\n            def.bodyB = this.selfBody.getBody();\r\n            var posA: Point = this.otherBody.GetWorldPoint(this.otherAnchor[0], this.otherAnchor[1]);\r\n            def.localAnchorA.setValue(posA.x, posA.y);\r\n            var posB: Point = this.selfBody.GetWorldPoint(this.selfAnchor[0], this.selfAnchor[1]);\r\n            def.localAnchorB.setValue(posB.x, posB.y);\r\n            var groundA: Point = this.otherBody.GetWorldPoint(this.otherGroundPoint[0], this.otherGroundPoint[1]);\r\n            def.groundAnchorA.setValue(groundA.x, groundA.y);\r\n            var groundB: Point = this.selfBody.GetWorldPoint(this.selfGroundPoint[0], this.selfGroundPoint[1]);\r\n            def.groundAnchorB.setValue(groundB.x, groundB.y);\r\n            def.ratio = this.ratio;\r\n            def.collideConnected = this.collideConnected;\r\n            this._joint = Physics2D.I._factory.create_PulleyJoint(def);\r\n        }\r\n    }\r\n}","import { JointBase } from \"./JointBase\";\r\nimport { Sprite } from \"../../display/Sprite\"\r\nimport { Physics2D } from \"../Physics2D\"\r\nimport { RigidBody } from \"../RigidBody\"\r\nimport { physics2D_RevoluteJointDef } from \"./JointDefStructInfo\";\r\nimport { Utils } from \"../../utils/Utils\";\r\n\r\n/**\r\n * 旋转关节强制两个物体共享一个锚点，两个物体相对旋转\r\n */\r\nexport class RevoluteJoint extends JointBase {\r\n    /**@private */\r\n    private static _temp: physics2D_RevoluteJointDef;\r\n    /**[首次设置有效]关节的自身刚体*/\r\n    selfBody: RigidBody;\r\n    /**[首次设置有效]关节的连接刚体，可不设置*/\r\n    otherBody: RigidBody;\r\n    /**[首次设置有效]关节的链接点，是相对于自身刚体的左上角位置偏移*/\r\n    anchor: any[] = [0, 0];\r\n\r\n    /**[首次设置有效]两个刚体是否可以发生碰撞，默认为false*/\r\n    collideConnected: boolean = false;\r\n\r\n    /**是否开启马达，开启马达可使目标刚体运动*/\r\n    private _enableMotor: boolean = false;\r\n    /**启用马达后，可以达到的最大旋转速度*/\r\n    private _motorSpeed: number = 0;\r\n    /**启用马达后，可以施加的最大扭距，如果最大扭矩太小，会导致不旋转*/\r\n    private _maxMotorTorque: number = 10000;\r\n\r\n    /**是否对刚体的旋转范围加以约束*/\r\n    private _enableLimit: boolean = false;\r\n    /**启用约束后，刚体旋转范围的下限角度*/\r\n    private _lowerAngle: number = 0;\r\n    /**启用约束后，刚体旋转范围的上限角度*/\r\n    private _upperAngle: number = 0;\r\n    /**\r\n     * @override\r\n     */\r\n    protected _createJoint(): void {\r\n        if (!this._joint) {\r\n            this.selfBody = this.selfBody || this.owner.getComponent(RigidBody);\r\n            if (!this.selfBody) throw \"selfBody can not be empty\";\r\n            var def: physics2D_RevoluteJointDef = RevoluteJoint._temp || (RevoluteJoint._temp = new physics2D_RevoluteJointDef());\r\n            def.bodyB = this.selfBody.getBody();\r\n            def.bodyA = this.otherBody ? this.otherBody.getBody() : Physics2D.I._emptyBody;\r\n\r\n            let global = this.selfBody.GetWorldPoint(this.anchor[0], this.anchor[1]);\r\n            def.anchor.setValue(global.x, global.y)\r\n            def.enableMotor = this._enableMotor;\r\n            def.motorSpeed = this._motorSpeed;\r\n            def.maxMotorTorque = this._maxMotorTorque;\r\n            def.enableLimit = this._enableLimit;\r\n            def.lowerAngle = Utils.toRadian(this._lowerAngle);\r\n            def.upperAngle = Utils.toRadian(this._upperAngle);\r\n            def.collideConnected = this.collideConnected;\r\n\r\n            this._joint = this._factory.create_RevoluteJoint(def);\r\n        }\r\n    }\r\n\r\n    /**是否开启马达，开启马达可使目标刚体运动*/\r\n    get enableMotor(): boolean {\r\n        return this._enableMotor;\r\n    }\r\n\r\n    set enableMotor(value: boolean) {\r\n        this._enableMotor = value;\r\n        if (this._joint) this._factory.set_Joint_EnableMotor(this._joint, value);\r\n    }\r\n\r\n    /**启用马达后，可以达到的最大旋转速度*/\r\n    get motorSpeed(): number {\r\n        return this._motorSpeed;\r\n    }\r\n\r\n    set motorSpeed(value: number) {\r\n        this._motorSpeed = value;\r\n        if (this._joint) this._factory.set_Joint_SetMotorSpeed(this._joint, value);\r\n    }\r\n\r\n    /**启用马达后，可以施加的最大扭距，如果最大扭矩太小，会导致不旋转*/\r\n    get maxMotorTorque(): number {\r\n        return this._maxMotorTorque;\r\n    }\r\n\r\n    set maxMotorTorque(value: number) {\r\n        this._maxMotorTorque = value;\r\n        if (this._joint) this._factory.set_Joint_SetMaxMotorTorque(this._joint, value);\r\n    }\r\n\r\n    /**是否对刚体的旋转范围加以约束*/\r\n    get enableLimit(): boolean {\r\n        return this._enableLimit;\r\n    }\r\n\r\n    set enableLimit(value: boolean) {\r\n        this._enableLimit = value;\r\n        if (this._joint) this._factory.set_Joint_EnableLimit(this._joint, value);\r\n    }\r\n\r\n    /**启用约束后，刚体旋转范围的下限角度*/\r\n    get lowerAngle(): number {\r\n        return this._lowerAngle;\r\n    }\r\n\r\n    set lowerAngle(value: number) {\r\n        this._lowerAngle = value;\r\n        if (this._joint) this._factory.set_Joint_SetLimits(this._joint, Utils.toRadian(value), Utils.toRadian(this._upperAngle));\r\n    }\r\n\r\n    /**启用约束后，刚体旋转范围的上限角度*/\r\n    get upperAngle(): number {\r\n        return this._upperAngle;\r\n    }\r\n\r\n    set upperAngle(value: number) {\r\n        this._upperAngle = value;\r\n        if (this._joint) this._factory.set_Joint_SetLimits(this._joint, Utils.toRadian(this._lowerAngle), Utils.toRadian(value));\r\n    }\r\n}","import { JointBase } from \"./JointBase\";\r\nimport { Point } from \"../../maths/Point\"\r\nimport { RigidBody } from \"../RigidBody\"\r\nimport { physics2D_WeldJointDef } from \"./JointDefStructInfo\";\r\n\r\n/**\r\n * 焊接关节：焊接关节的用途是使两个物体不能相对运动，受到关节的限制，两个刚体的相对位置和角度都保持不变，看上去像一个整体\r\n */\r\nexport class WeldJoint extends JointBase {\r\n    /**@private */\r\n    private static _temp: physics2D_WeldJointDef;\r\n    /**[首次设置有效]关节的自身刚体*/\r\n    selfBody: RigidBody;\r\n    /**[首次设置有效]关节的连接刚体*/\r\n    otherBody: RigidBody;\r\n    /**[首次设置有效]关节的链接点，是相对于自身刚体的左上角位置偏移*/\r\n    anchor: any[] = [0, 0];\r\n    /**[首次设置有效]两个刚体是否可以发生碰撞，默认为false*/\r\n    collideConnected: boolean = false;\r\n\r\n    /**弹簧系统的震动频率，可以视为弹簧的弹性系数，通常频率应该小于时间步长频率的一半*/\r\n    private _frequency: number = 5;\r\n    /**刚体在回归到节点过程中受到的阻尼比，建议取值0~1*/\r\n    private _dampingRatio: number = 0.7;\r\n    /**\r\n     * @override\r\n     */\r\n    protected _createJoint(): void {\r\n        if (!this._joint) {\r\n            if (!this.otherBody) throw \"otherBody can not be empty\";\r\n            this.selfBody = this.selfBody || this.owner.getComponent(RigidBody);\r\n            if (!this.selfBody) throw \"selfBody can not be empty\";\r\n\r\n            var def: physics2D_WeldJointDef = WeldJoint._temp || (WeldJoint._temp = new physics2D_WeldJointDef());\r\n            var anchorPos: Point = this.selfBody.GetWorldPoint(this.anchor[0], this.anchor[1]);\r\n            def.bodyA = this.otherBody.getBody();\r\n            def.bodyB = this.selfBody.getBody();\r\n            def.anchor.setValue(anchorPos.x, anchorPos.y);\r\n            def.frequency = this._frequency;\r\n            def.dampingRatio = this._dampingRatio;\r\n            def.collideConnected = this.collideConnected;\r\n            this._joint = this._factory.create_WeldJoint(def);\r\n        }\r\n    }\r\n\r\n    /**弹簧系统的震动频率，可以视为弹簧的弹性系数，通常频率应该小于时间步长频率的一半*/\r\n    get frequency(): number {\r\n        return this._frequency;\r\n    }\r\n\r\n    set frequency(value: number) {\r\n        this._frequency = value;\r\n        if (this._joint) {\r\n            this._factory.set_Joint_frequencyAndDampingRatio(this._joint, this._frequency, this._dampingRatio, false);\r\n        }\r\n    }\r\n\r\n    /**刚体在回归到节点过程中受到的阻尼比，建议取值0~1*/\r\n    get damping(): number {\r\n        return this._dampingRatio;\r\n    }\r\n\r\n    set damping(value: number) {\r\n        this._dampingRatio = value;\r\n        if (this._joint) {\r\n            this._factory.set_Joint_frequencyAndDampingRatio(this._joint, this._frequency, this._dampingRatio, true);\r\n        }\r\n    }\r\n}","import { JointBase } from \"./JointBase\";\r\nimport { Point } from \"../../maths/Point\"\r\nimport { RigidBody } from \"../RigidBody\"\r\nimport { physics2D_WheelJointDef } from \"./JointDefStructInfo\";\r\nimport { Utils } from \"../../utils/Utils\";\r\n\r\n/**\r\n * 轮子关节：围绕节点旋转，包含弹性属性，使得刚体在节点位置发生弹性偏移\r\n */\r\nexport class WheelJoint extends JointBase {\r\n    /**@private */\r\n    private static _temp: physics2D_WheelJointDef;\r\n    /**[首次设置有效]关节的自身刚体*/\r\n    selfBody: RigidBody;\r\n    /**[首次设置有效]关节的连接刚体*/\r\n    otherBody: RigidBody;\r\n    /**[首次设置有效]关节的链接点，是相对于自身刚体的左上角位置偏移*/\r\n    anchor: any[] = [0, 0];\r\n    /**[首次设置有效]两个刚体是否可以发生碰撞，默认为false*/\r\n    collideConnected: boolean = false;\r\n    /**\r\n     * @deprecated\r\n     * [首次设置有效]一个向量值，描述运动方向，比如1,0是沿X轴向右*/\r\n    _axis: any[] = [1, 0];\r\n    /**[首次设置有效]一个角度，描述运动方向，比如0是沿X轴向右*/\r\n    angle: number = 0;\r\n\r\n    /**弹簧系统的震动频率，可以视为弹簧的弹性系数，通常频率应该小于时间步长频率的一半*/\r\n    private _frequency: number = 1;\r\n    /**刚体在回归到节点过程中受到的阻尼比，建议取值0~1*/\r\n    private _dampingRatio: number = 0.7;\r\n\r\n    /**是否开启马达，开启马达可使目标刚体运动*/\r\n    private _enableMotor: boolean = false;\r\n    /**启用马达后，可以达到的最大旋转速度*/\r\n    private _motorSpeed: number = 0;\r\n    /**启用马达后，可以施加的最大扭距，如果最大扭矩太小，会导致不旋转*/\r\n    private _maxMotorTorque: number = 10000;\r\n\r\n    /**是否对刚体的移动范围加以约束*/\r\n    private _enableLimit: boolean = true;\r\n    /**启用约束后，刚体移动范围的下限，是距离anchor的偏移量*/\r\n    private _lowerTranslation: number = 0;\r\n    /**启用约束后，刚体移动范围的上限，是距离anchor的偏移量*/\r\n    private _upperTranslation: number = 0;\r\n\r\n\r\n    /**\r\n     * @override\r\n     */\r\n    protected _createJoint(): void {\r\n        if (!this._joint) {\r\n            if (!this.otherBody) throw \"otherBody can not be empty\";\r\n            this.selfBody = this.selfBody || this.owner.getComponent(RigidBody);\r\n            if (!this.selfBody) throw \"selfBody can not be empty\";\r\n\r\n            var def: physics2D_WheelJointDef = WheelJoint._temp || (WheelJoint._temp = new physics2D_WheelJointDef());\r\n            var anchorPos: Point = this.selfBody.GetWorldPoint(this.anchor[0], this.anchor[1]);\r\n            def.anchor.setValue(anchorPos.x, anchorPos.y);\r\n            let radian = Utils.toRadian(this.angle);\r\n            def.axis.setValue(Math.cos(radian), Math.sin(radian));\r\n            def.bodyA = this.otherBody.getBody();\r\n            def.bodyB = this.selfBody.getBody();;\r\n            def.enableMotor = this._enableMotor;\r\n            def.motorSpeed = this._motorSpeed;\r\n            def.maxMotorTorque = this._maxMotorTorque;\r\n            def.collideConnected = this.collideConnected;\r\n            def.enableLimit = this._enableLimit;\r\n            def.lowerTranslation = this._lowerTranslation;\r\n            def.upperTranslation = this._upperTranslation;\r\n            def.frequency = this._frequency;\r\n            def.dampingRatio = this._dampingRatio;\r\n            this._joint = this._factory.create_WheelJoint(def);\r\n        }\r\n    }\r\n\r\n    /**弹簧系统的震动频率，可以视为弹簧的弹性系数，通常频率应该小于时间步长频率的一半*/\r\n    get frequency(): number {\r\n        return this._frequency;\r\n    }\r\n\r\n    set frequency(value: number) {\r\n        this._frequency = value;\r\n        if (this._joint) {\r\n            this._factory.set_Joint_frequencyAndDampingRatio(this._joint, this._frequency, this._dampingRatio, false)\r\n        }\r\n    }\r\n\r\n    /**刚体在回归到节点过程中受到的阻尼比，建议取值0~1*/\r\n    get damping(): number {\r\n        return this._dampingRatio;\r\n    }\r\n\r\n    set damping(value: number) {\r\n        this._dampingRatio = value;\r\n        if (this._joint) {\r\n            this._factory.set_Joint_frequencyAndDampingRatio(this._joint, this._frequency, this._dampingRatio, true)\r\n        }\r\n    }\r\n\r\n    /**是否开启马达，开启马达可使目标刚体运动*/\r\n    get enableMotor(): boolean {\r\n        return this._enableMotor;\r\n    }\r\n\r\n    set enableMotor(value: boolean) {\r\n        this._enableMotor = value;\r\n        if (this._joint) this._factory.set_Joint_EnableMotor(this._joint, value);\r\n    }\r\n\r\n    /**启用马达后，可以达到的最大旋转速度*/\r\n    get motorSpeed(): number {\r\n        return this._motorSpeed;\r\n    }\r\n\r\n    set motorSpeed(value: number) {\r\n        this._motorSpeed = value;\r\n        if (this._joint) this._factory.set_Joint_SetMotorSpeed(this._joint, value);\r\n    }\r\n\r\n    /**启用马达后，可以施加的最大扭距，如果最大扭矩太小，会导致不旋转*/\r\n    get maxMotorTorque(): number {\r\n        return this._maxMotorTorque;\r\n    }\r\n\r\n    set maxMotorTorque(value: number) {\r\n        this._maxMotorTorque = value;\r\n        if (this._joint) this._factory.set_Joint_SetMaxMotorTorque(this._joint, value);\r\n    }\r\n\r\n    /**是否对刚体的移动范围加以约束*/\r\n    get enableLimit(): boolean {\r\n        return this._enableLimit;\r\n    }\r\n\r\n    set enableLimit(value: boolean) {\r\n        this._enableLimit = value;\r\n        if (this._joint) this._factory.set_Joint_EnableLimit(this._joint, value);\r\n    }\r\n\r\n    /**启用约束后，刚体移动范围的下限，是距离anchor的偏移量*/\r\n    get lowerTranslation(): number {\r\n        return this._lowerTranslation;\r\n    }\r\n\r\n    set lowerTranslation(value: number) {\r\n        this._lowerTranslation = value;\r\n        if (this._joint) this._factory.set_Joint_SetLimits(this._joint, value, this._upperTranslation);\r\n    }\r\n\r\n    /**启用约束后，刚体移动范围的上限，是距离anchor的偏移量*/\r\n    get upperTranslation(): number {\r\n        return this._upperTranslation;\r\n    }\r\n\r\n    set upperTranslation(value: number) {\r\n        this._upperTranslation = value;\r\n        if (this._joint) this._factory.set_Joint_SetLimits(this._joint, this._lowerTranslation, value);\r\n    }\r\n\r\n    /**\r\n     * @deprecated\r\n     * 启用约束后，刚体移动范围的上限，是距离anchor的偏移量*/\r\n    get axis(): any {\r\n        return this._axis;\r\n    }\r\n\r\n    set axis(value: any) {\r\n        this._axis = value;\r\n        this.angle = Utils.toAngle(Math.atan2(value[1], value[0]));\r\n    }\r\n}","\r\nimport { Graphics } from \"../display/Graphics\"\r\nimport { Sprite } from \"../display/Sprite\"\r\nimport { Vector2 } from \"../maths/Vector2\";\r\nimport { Context } from \"../resource/Context\"\r\nimport { IPhysiscs2DFactory } from \"./IPhysiscs2DFactory\";\r\n/**\r\n * 物理辅助线\r\n */\r\nexport class Physics2DDebugDraw extends Sprite {\r\n    DrawString_color: string;\r\n    Red: string;\r\n    Green: string;\r\n    /**@protected */\r\n    protected _camera: any;\r\n\r\n    /**@protected */\r\n    protected _mG: Graphics;\r\n    /**@private */\r\n    private _textSp: Sprite;\r\n    /**@protected */\r\n    protected _textG: Graphics;\r\n    /**@protected */\r\n    protected _factory: IPhysiscs2DFactory;\r\n\r\n    /**@protected */\r\n    protected _lineWidth: number;\r\n\r\n    constructor(factory: IPhysiscs2DFactory) {\r\n        super();\r\n        this._factory = factory;\r\n        this.DrawString_color = \"#E69999\";\r\n        this.Red = \"#ff0000\";\r\n        this.Green = \"#00ff00\"\r\n        this._camera = {};\r\n        this._camera.m_center = new Vector2(0, 0);\r\n        this._camera.m_extent = 25;\r\n        this._camera.m_zoom = 1;\r\n        this._camera.m_width = 1280;\r\n        this._camera.m_height = 800;\r\n\r\n        this._mG = new Graphics();\r\n        this.graphics = this._mG;\r\n\r\n        this._textSp = new Sprite();\r\n        this._textG = this._textSp.graphics;\r\n        this.addChild(this._textSp);\r\n    }\r\n\r\n    /**@private \r\n     * @override\r\n    */\r\n    render(ctx: Context, x: number, y: number): void {\r\n        this._renderToGraphic();\r\n        super.render(ctx, x, y);\r\n    }\r\n\r\n\r\n\r\n    /**@private */\r\n    private _renderToGraphic(): void {\r\n        if (this._factory.world) {\r\n            this._textG.clear();\r\n            this._mG.clear();\r\n            this._mG.save();\r\n            this._mG.scale(this._factory.PIXEL_RATIO, this._factory.PIXEL_RATIO);\r\n            this._lineWidth = this._factory.layaToPhyValue(1);\r\n            if (this._factory.world.DebugDraw) // ts源码版box2d\r\n                this._factory.world.DebugDraw();\r\n            else\r\n                this._factory.world.DrawDebugData();\r\n            this._mG.restore();\r\n        }\r\n    }\r\n\r\n\r\n    PushTransform(tx: number, ty: number, angle: number): void {\r\n        this._mG.save();\r\n        this._mG.translate(tx, ty);\r\n        this._mG.rotate(angle);\r\n    }\r\n\r\n    PopTransform(): void {\r\n        this._mG.restore();\r\n    }\r\n\r\n    get mG(): Graphics {\r\n        return this._mG;\r\n    }\r\n\r\n    get textG(): Graphics {\r\n        return this._textG;\r\n    }\r\n\r\n    get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n\r\n    get camera(): any {\r\n        return this._camera;\r\n    }\r\n}\r\n","import { ClassUtils } from \"../utils/ClassUtils\";\r\nimport { BoxCollider } from \"./Collider2D/BoxCollider\";\r\nimport { ChainCollider } from \"./Collider2D/ChainCollider\";\r\nimport { CircleCollider } from \"./Collider2D/CircleCollider\";\r\nimport { ColliderBase } from \"./Collider2D/ColliderBase\";\r\nimport { EdgeCollider } from \"./Collider2D/EdgeCollider\";\r\nimport { DistanceJoint } from \"./joint/DistanceJoint\";\r\nimport { GearJoint } from \"./joint/GearJoint\";\r\nimport { JointBase } from \"./joint/JointBase\";\r\nimport { MotorJoint } from \"./joint/MotorJoint\";\r\nimport { MouseJoint } from \"./joint/MouseJoint\";\r\nimport { PrismaticJoint } from \"./joint/PrismaticJoint\";\r\nimport { PulleyJoint } from \"./joint/PulleyJoint\";\r\nimport { RevoluteJoint } from \"./joint/RevoluteJoint\";\r\nimport { WeldJoint } from \"./joint/WeldJoint\";\r\nimport { WheelJoint } from \"./joint/WheelJoint\";\r\nimport { Physics2D } from \"./Physics2D\";\r\nimport { Physics2DDebugDraw } from \"./Physics2DDebugDraw\";\r\nimport { PolygonCollider } from \"./Collider2D/PolygonCollider\";\r\nimport { RigidBody } from \"./RigidBody\";\r\n\r\nlet c = ClassUtils.regClass;\r\nc(\"Physics2D\", Physics2D);\r\nc(\"Physics2DDebugDraw\", Physics2DDebugDraw);\r\nc(\"ColliderBase\", ColliderBase);\r\nc(\"BoxCollider\", BoxCollider);\r\nc(\"ChainCollider\", ChainCollider);\r\nc(\"CircleCollider\", CircleCollider);\r\nc(\"EdgeCollider\", EdgeCollider);\r\nc(\"PolygonCollider\", PolygonCollider);\r\nc(\"RigidBody\", RigidBody);\r\nc(\"JointBase\", JointBase);\r\nc(\"DistanceJoint\", DistanceJoint);\r\nc(\"GearJoint\", GearJoint);\r\nc(\"MotorJoint\", MotorJoint);\r\nc(\"MouseJoint\", MouseJoint);\r\nc(\"PrismaticJoint\", PrismaticJoint);\r\nc(\"PulleyJoint\", PulleyJoint);\r\nc(\"RevoluteJoint\", RevoluteJoint);\r\nc(\"WeldJoint\", WeldJoint);\r\nc(\"WheelJoint\", WheelJoint);"],"mappings":"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"}